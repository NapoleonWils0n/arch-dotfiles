#+STARTUP: content

* Web

* Emacs
** [[https://www.emacswiki.org/emacs/EmacsAsDaemon][EmacsWiki: Emacs As Daemon]] :website:
[2016-08-07 Sun 15:55] Emacs as Daemon on OS X using Launchd

If you’re running Emacs 23, you can run Emacs As Daemon via OS X’s launchd. The easiest solution is to use a tool like Lingon to create the plist file or can create one manually like this:

#+BEGIN_EXAMPLE
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" 
        "http://www.apple.com/DTDs/PropertyList-1.0.dtd"> 
     <plist version="1.0">
      <dict> 
        <key>Label</key>
        <string>gnu.emacs.daemon</string>
        <key>ProgramArguments</key>
        <array>
          <string>/Applications/Emacs.app/Contents/MacOS/Emacs</string>
          <string>--daemon</string>
        </array>
       <key>RunAtLoad</key>
       <true/>
       <key>ServiceDescription</key>
       <string>Gnu Emacs Daemon</string>
       <key>UserName</key>
       <string>[YOUR USERNAME HERE]</string>
      </dict>
    </plist>
#+END_EXAMPLE

This can then be installed in /Library/LaunchAgents and loaded via:

    sudo launchctl load -w /Library/LaunchAgents/gnu.emacs.daemon.plist
** [[https://www.emacswiki.org/emacs/Magit][EmacsWiki: Magit]] :website:
   :PROPERTIES:
   :ID:       08b908db-4f8b-4d81-be0e-dc1df157ea2c
   :END:
[2016-08-12 Fri 20:51] Getting started with Magit is really easy:

M-x magit-status to see git status, and in the status buffer:
s to stage files
c c to commit (type the message then C-c C-c to actually commit)
b b to switch to another branch
Other handy keys:

P u to do a git push
F u to do a git pull
try to press TAB

** [[http://orgmode.org/manual/org_002dcrypt_002eel.html][org-crypt.el - The Org Manual]] :website:
 [2016-08-25 Thu 23:19] 15.11 org-crypt.el

 Org-crypt will encrypt the text of an entry, but not the headline, or properties. Org-crypt uses the Emacs EasyPG library to encrypt and decrypt files.

 Any text below a headline that has a ‘:crypt:’ tag will be automatically be encrypted when the file is saved. If you want to use a different tag just customize the org-crypt-tag-matcher setting.

 To use org-crypt it is suggested that you have the following in your .emacs:

#+BEGIN_EXAMPLE
      (require 'org-crypt)
      (org-crypt-use-before-save-magic)
      (setq org-tags-exclude-from-inheritance (quote ("crypt")))
     
      (setq org-crypt-key nil)
	;; GPG key to use for encryption
	;; Either the Key ID or set to nil to use symmetric encryption.
     
      (setq auto-save-default nil)
	;; Auto-saving does not cooperate with org-crypt.el: so you need
	;; to turn it off if you plan to use org-crypt.el quite often.
	;; Otherwise, you'll get an (annoying) message each time you
	;; start Org.
     
	;; To turn it off only locally, you can insert this:
	;;
	;; # -*- buffer-auto-save-file-name: nil; -*-
#+END_EXAMPLE

Excluding the crypt tag from inheritance prevents already encrypted text being encrypted again.
** [[http://orgmode.org/worg/org-hacks.html][Org ad hoc code, quick hacks and workarounds]] :website:
 [2016-08-24 Wed 22:42] Reload Org

 As of Org version 6.23b (released Sunday Feb 22, 2009) there is a new function to reload org files.

 Normally you want to use the compiled files since they are faster. If you update your org files you can easily reload them with

 #+BEGIN_EXAMPLE
 M-x org-reload
 #+END_EXAMPLE

 If you run into a bug and want to generate a useful backtrace you can reload the source files instead of the compiled files with

 #+BEGIN_EXAMPLE
 C-u M-x org-reload
 #+END_EXAMPLE

 and turn on the "Enter Debugger On Error" option. Redo the action that generates the error and cut and paste the resulting backtrace. To switch back to the compiled version just reload again with

 #+BEGIN_EXAMPLE
 M-x org-reload
 #+END_EXAMPLE

** [[https://github.com/yjwen/org-reveal/issues/148][Export error is back · Issue #148 · yjwen/org-reveal · GitHub]] :website:
 [2016-08-24 Wed 21:57] I found this workaround solution: http://emacs.stackexchange.com/a/16616/2780
 Actually only doing C-u M-x org-reload was enough in my case. But I need to run it every time I restarted emacs (fortunately that is not often).
** [[https://stackoverflow.com/questions/24833964/package-listed-in-melpa-but-not-found-in-package-install][emacs - Package listed in MELPA, but not found in package install - Stack Overflow]] :website:
   [2016-08-24 Wed 14:51] M-x package-list-packages

** [[https://emacsclub.github.io/html/org_tutorial.html][Org-mode Tutorial / Cheat Sheet]] :website:
[2016-08-19 Fri 00:53] Headings
It's all about headings in org. Headings such as this are created with * (stars). The number of stars defines the depth of the heading. Pressing <TAB> on headings will minimize/maximize them. Pressing tab multiple times in a row on headings with subheadings will maximize each subheading by depth corresponding to the number of times you pressed <TAB>.

Subheadings

Subheadings can nest within other headings such as this one. This is really convenient for organizing stuff.

"TODO"s (C-c C-t)
TODO's are created by starting headers with the keyword TODO or DONE. You can also create one with C-c C-t on a header. They are meant to represent tasks you wish to create within your organizational document. These can be helpful when planning out projects or assignments.

The TODO cycle

You can turn an existing header into a TODO item by cycling its TODO status. The shortcut for this is C-c C-t (t for todo).

Non-TODO -> TODO -> DONE -> Non-TODO … (with C-c C-t).

Lists
You can create bullets with the - (dash), numbered bullets or lists with #. (number[dot]). Tabbing multiple times changes the indentation of the bullet, but only if there is no text yet. Tabbing multiple levels can get confusing, but if you remember to <TAB> before typing - or #., things tend to work out.

Ordered Lists

item 1
item 2
sub 1
sub 2
subsub 1
Unordered Lists

Start with -, +, or *.

hello
item 2
item 3
subitem 1
sub
subsub
Description Lists

Start with -, +, or * and followed by ::

Matlab is a funny language. 
 - Scope :: Scope doesn't work as expected, and messes everything up
   when loops mix variables up in recursive functions.
 - Namespaces :: You wish. 
 - Header Files :: Nope.
gives

Matlab is a funny language.

Scope
Scope doesn't work as expected, and messes everything up when loops mix variables up in recursive functions.
Namespaces
You wish.
Header Files
Nope.
Text Formatting
Individual words can be bolded with stars, italicized with forward slashes, and underlined with underscores. Also, there is verbatim and strike-through.

*bold* /italics/ _underline_ ~verbatim~ +strike-through+
Tables
Tables can be created from any line that starts with '|' (pipe). A line that starts with '|-' (pipe dash) is considered a horizontal seperator; <TAB> after inserting it to expand the separator.

this    is      a       sample  table
move    from    one     col     to
the     other   with    <TAB>   this column
Some tips:

<TAB> realigns the columns, and moves to the next column. If at end of line, it will create a new row.
C-c C-c will realign the columns without moving or creating new ones.
<RET> moves to the next row.
Table Formatting

When exporting, tables are drawn without cell borders or frames. Here are useful table formatting commands which you place immediately before a table.

This is a table with lines around and between cells
this    is      a       sample  table
move    from    one     col     to
the     other   with    <TAB>   this column
Literal Examples
Literal examples are snippets of text or source code that need to be unformatted on org export. Put this text between #+begin-example and +end_example.

Source Code

Org-mode is great for inserting snippets of code. This can be done with the

#+BEGIN_SRC [major-mode-name] [options]
#+END_SRC
[major-mode-name] adds a lot of extra functionality to these code blocks within your org file. It's also good for whoever is reading to know what the language is.

For example:

1:  int main() { 
2:  return 0; 
3:  }
Useful options and commands.

Options:

-n : add line numbers to the source code.
+n : add line numbers but continue from last SRC snippet.
-r : remove labels from source code
Commands:

C-c ['] : Allows you to edit the source code at point in its native mode. Opens a new buffer where you exit after editing by the command again.
C-c l : calls org-store-link when editing with ~C-c '~. This creates a label at the line currently being edited. It can be retrieved later with C-c C-l.
Easy templates

It gets tiring to use the long tags if you're doing this a lot. These are shortcuts to generate the above snippet borders. To insert, type a '<' followed by a template selector and then <TAB>.

Template selectors:

s    #+begin_src ... #+end_src 
e    #+begin_example ... #+end_example
q    #+begin_quote ... #+end_quote 
v    #+begin_verse ... #+end_verse 
c    #+begin_center ... #+end_center 
l    #+begin_latex ... #+end_latex 
L    #+latex: 
h    #+begin_html ... #+end_html 
H    #+html: 
a    #+begin_ascii ... #+end_ascii 
A    #+ascii: 
i    #+index: line 
I    #+include: line 
Linking
Linking files together

You can link files together with

[[file:filename][name-of-link]]
This will preserve links after export to HTML as well.

Linking sections within a document

You can create a link to a section within your document with the section name in brackets. The second option lets you call the link something else.

[[section-title]]
[[section-title][link-title]]
Exporting (C-c C-e)
You can export org files to any of the supported formats with C-c C-e [option].

C-c C-e will show you the options available in a separate buffer. Common ones are text, html, and latex. You can get PDFs by converting to latex, but you need to have a LaTeX environment installed on your system to use this.

Export Options (C-c C-e t)

When org files are exported, certain variables are set automatically but can be manually set by you. To change a variable's value, use

#+VARIABLE-NAME: value
anywhere in your document. At the top is probably best.

To paste a template of all export options in your org document so that you can set them immediately, use (org-insert-export-options-template), or C-c C-e t.

This will print

#+TITLE:       the title to be shown (default is the buffer name)
#+AUTHOR:      the author (default taken from user-full-name)
#+DATE:        a date, an Org timestamp120, or a format string for format-time-string
#+EMAIL:       his/her email address (default from user-mail-address)
#+DESCRIPTION: the page description, e.g. for the XHTML meta tag
#+KEYWORDS:    the page keywords, e.g. for the XHTML meta tag
#+LANGUAGE:    language for HTML, e.g. ‘en’ (org-export-default-language)
#+TEXT:        Some descriptive text to be inserted at the beginning.
#+TEXT:        Several lines may be given.
#+OPTIONS:     H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t ...
#+BIND:        lisp-var lisp-val, e.g.: org-export-latex-low-levels itemize
               You need to confirm using these, or configure org-export-allow-BIND
#+LINK_UP:     the ``up'' link of an exported page
#+LINK_HOME:   the ``home'' link of an exported page
#+LATEX_HEADER: extra line(s) for the LaTeX header, like \usepackage{xyz}
#+EXPORT_SELECT_TAGS:   Tags that select a tree for export
#+EXPORT_EXCLUDE_TAGS:  Tags that exclude a tree from export
#+XSLT:        the XSLT stylesheet used by DocBook exporter to generate FO file
within your document, but with your actual variable values instead of descriptions. Change any of the variables to the value of your choice. These descriptions are provided here for your reference.

The #+OPTIONS variable is very useful for specific tweaks and will effect both HTML and LaTeX exports.

H:         set the number of headline levels for export
num:       turn on/off section-numbers
toc:       turn on/off table of contents, or set level limit (integer)
\n:        turn on/off line-break-preservation (DOES NOT WORK)
@:         turn on/off quoted HTML tags
::         turn on/off fixed-width sections
|:         turn on/off tables
^:         turn on/off TeX-like syntax for sub- and superscripts.  If
you write "^:{}", a_{b} will be interpreted, but
the simple a_b will be left as it is.
-:         turn on/off conversion of special strings.
f:         turn on/off footnotes like this[1].
todo:      turn on/off inclusion of TODO keywords into exported text
tasks:     turn on/off inclusion of tasks (TODO items), can be nil to remove
all tasks, todo to remove DONE tasks, or list of kwds to keep
pri:       turn on/off priority cookies
tags:      turn on/off inclusion of tags, may also be not-in-toc
<:         turn on/off inclusion of any time/date stamps like DEADLINES
*:         turn on/off emphasized text (bold, italic, underlined)
TeX:       turn on/off simple TeX macros in plain text
LaTeX:     configure export of LaTeX fragments.  Default auto
skip:      turn on/off skipping the text before the first heading
author:    turn on/off inclusion of author name/email into exported file
email:     turn on/off inclusion of author email into exported file
creator:   turn on/off inclusion of creator info into exported file
timestamp: turn on/off inclusion creation time into exported file
d:         turn on/off inclusion of drawers
Variables are set with nil or t, and sometimes take an argument. For example

#+OPTIONS:     H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t ...
Title

The title is taken from the first non-comment line in the file. If there is none, ie your file starts with a heading, it uses the filename. The title can be manually set using

#+TITLE: This is the title of the document
Table of Contents

Normally inserted after the first headline, you can set manually by inserting TABLE-OF-CONTENTS inside square-brackets ([]) seperately on a line.

Some useful options are:

#+OPTIONS: toc:2          (only to two levels in TOC)
#+OPTIONS: toc:nil        (no TOC at all)
Including Other Files

You can include files in an org document, which will be rendered on export. This is done using the single line command

#+INCLUDE: "file-path" [type] [src-language]
type can be either (quote, example, or src). if type is src, then src-language can be any major-mode language.

HTML Export

Stylesheet

You can include a stylesheet by using

#+STYLE:    <link rel="stylesheet" type="text/css" href="../stylesheet.css" />
The styles used by org-mode to export specific parts of your document can be set in your stylesheet with the following variables:

p.author            author information, including email
p.date              publishing date
p.creator           creator info, about org mode version
.title              document title
.todo               TODO keywords, all not-done states
.done               the DONE keywords, all states that count as done
.WAITING            each TODO keyword also uses a class named after itself
.timestamp          timestamp
.timestamp-kwd      keyword associated with a timestamp, like SCHEDULED
.timestamp-wrapper  span around keyword plus timestamp
.tag                tag in a headline
._HOME              each tag uses itself as a class, "@" replaced by "_"
.target             target for links
.linenr             the line number in a code example
.code-highlighted   for highlighting referenced code lines
div.outline-N       div for outline level N (headline plus text))
div.outline-text-N  extra div for text at outline level N
.section-number-N   section number in headlines, different for each level
div.figure          how to format an inlined image
pre.src             formatted source code
pre.example         normal example
p.verse             verse paragraph
div.footnotes       footnote section headline
p.footnote          footnote definition paragraph, containing a footnote
.footref            a footnote reference number (always a <sup>)
.footnum            footnote number in footnote definition (always <sup>)
Site Navigation

You can verily easily add "Up" and "Home" buttons on each page with

#+LINK_UP: 
#+LINK_HOME: index.html
Hyperlinks

Hyperlinks are managed by links and automatically converted to their html counterparts. See Linking Files.

Publishing
Publishing is simply automating your export pipeline. When you have many files that require export, it is a good idea to create a publishing script for this.

Publishing Script

To enable project publishing with org-mode, create a local file in the project directory with the instructions. In our example we have named it org_publish.el.

(defconst home (file-name-directory (or load-file-name buffer-file-name)))

(require 'org-publish)
(setq org-publish-project-alist
      `(
        ;; add all the components here
        ;; *notes* - publishes org files to html
        ("main-page"
         :base-directory ,(concat home "org/")
         :base-extension "org"  ; Filename suffix without dot
         :publishing-directory ,(concat home "html/")
         :recursive t           ; DONT include subdirectories
         :publishing-function org-publish-org-to-html
         :headline-levels 4             ; Just the default for this project.
         :style "<link rel=\"stylesheet\" type=\"text/css\" href=\"../css/stylesheet.css\" />"
         :auto-preamble t
         :auto-sitemap t                ; generate automagically
         :sitemap-sort-folders last
         :sitemap-title "Main Sitemap"
         )

        ;; The meeting notes to be published
        ("meeting-notes"
         :base-directory ,(concat home "org/meeting-notes/")
         :base-extension "org"
         :publishing-directory ,(concat home "html/meeting-notes/")
         :recursive nil
         :publishing-function org-publish-org-to-html
         :headline-levels 4
         :style "<link rel=\"stylesheet\" type=\"text/css\" href=\"../../css/stylesheet.css\" />"
         :auto-preamble t
         :auto-sitemap t
         :sitemap-title "Meeting Notes Directory"
         )

        ;; *static* - copies files to directories
        ("org-static"
         :base-directory ,(concat home "org/")
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory ,(concat home "html/")
         :recursive t
         :publishing-function org-publish-attachment
         )

        ;; *publish* with M-x org-publish-project RET emacsclub RET
        ("emacsclub" :components ("main-page" "meeting-notes" "org-static"))
        ))

* Linux
** [[http://steve-parker.org/articles/luks/][Articles - Linux Encrypted Filesystems with LUKS { steve-parker.org }]] :website:
[2016-08-15 Mon 00:08] 

#+BEGIN_EXAMPLE
#!/bin/sh

case $1 in
  start)
        cryptsetup luksOpen /dev/sda8 crypto
        echo "Mounting /crytpo..."
        mount /dev/mapper/crypto /crypto
        ;;
  stop)
        echo "Unmounting /crytpo..."
        umount /crypto
        cryptsetup luksClose crypto
        ;;
  *)
        echo "Usage: crypt [ start | stop ]"
        ;;
esac
#+END_EXAMPLE

** [[http://www.howtogeek.com/267376/how-to-automatically-correct-spelling-and-typos-when-using-cd-on-linux/][How to Automatically Correct Spelling and Typos When Using “cd” on Linux]] :website:
[2016-08-20 Sat 16:33] Scroll to the bottom of the .bashrc file and add the following line to the end of the file.

#+BEGIN_EXAMPLE
shopt -s cdspell
#+END_EXAMPLE

** [[http://man.cx/zathura(1)][Manpage for zathura - man.cx manual pages]] :website:
[2016-08-20 Sat 20:06] NAME

zathura − a PDF viewer

SYNOPSIS

zathura [-e xid] [-c path] [file] [password]

DESCRIPTION

zathura is a highly customizable and functional PDF viewer based on the poppler rendering library and the gtk+ toolkit. zathura provides a minimalistic and space saving interface, with a focus on keyboard interaction.

OPTIONS

-e xid

Reparents to window specified by xid. -c path Path to the config directory

DEFAULT SETTINGS

Shortcuts

J

Go to next page

K

Go to previous page

h

Scroll to the left

k

Scroll upwards

j

Scroll downwards

^f

Scroll page down

^b

Scroll page up

^d

Scroll half a page down

^u

Scroll half a page up

l

Scroll to the right

/

Search forwards

?

Search backwards

n

Search last keyword forwards

N

Search last keyword backwards

Tab

Toggle index

o

Open a file

a

Zoom to fit

s

Zoom to width

f

Follow a link on the page

m

Mark current position and save it in register specified by a character

’

Go to saved position specified by the ensuing character

r

Rotate the page

R

Reload the document

O

Change goto mode (L: search labels, D: default, O: manual offset)

^i

Invert the colors of the page

i

Change to insert mode

v

Change to visual mode

:

Focus inputbar

Backspace

Delete last character in the buffer

F5

Toggle fullscreen mode

^n

Toggle statusbar visibility

^m

Toggle inputbar visibility

Esc | ^c

Abort

^q

Quit the program

Index commands

k

Navigate to one element above the current position

j

Navigate to one element below the current position

h

Collapse current element

l

Expand current element

Space | Return

Select current element

Buffered commands

gg

Go to the first page

GG

Go to the last page

[0-9]+G

Go to the specified page

zI

Zoom in

zO

Zoom out

z0

Zoom to the original size

[0-9]+Z

Zoom to the given level

[0-9]+%

Move to the given position

Commands

blist

List and open bookmark

bmark

Bookmark current page

close

Close current file

coffset

Set page offset

delbmark

Delete given bookmark

export

Export images or attached files

info

Show information about the document

map

Map shortcut functions (map <key> <function> <argument> <mode>)

open

Open a file

print

Print the document

quit

Quit the program

rotate

Rotate the page

set

Set an option (set <id> <value>)

write

Save the document

Inputbar shortcuts

Up

Move up in the command history

Down

Move down in the command history

Tab | Shift + Tab

Tab completion

^w

Delete last word

CONFIGURATION

The complete configuration including the appearance and shortcuts of the program are defined in a separate file named config.h. In this file you are able to change and adjust all the settings of zathura according to your wishes.

In addition you can create a zathurarc file (default path: ~/.config/zathura/zathurarc) to overwrite settings and keybindings by using the set and map function. For more information please check the faq on the website: http://pwmt.org/projects/zathura
** [[https://librevault.com/][Librevault]] :website:
[2016-08-22 Mon 20:29] File synchronization designed with privacy in mind
