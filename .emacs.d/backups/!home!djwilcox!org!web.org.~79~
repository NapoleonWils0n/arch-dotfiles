#+STARTUP: content

* Web

** [[http://blog.briankoopman.com/unlock-ghost-account/][Unlock Your Locked Ghost Account]] :website:
 [2016-09-13 Tue 15:40] Unlock Your Locked Ghost Account
 01 MAY 2014 on Ghost
 I setup Ghost a little over a week ago, thinking my first post would be about the setup. Tonight, tired but not wanting to go to bed, I decided to work on the "How to setup Ghost" blog post. Foolishly, I had forgotten my password, having only really logged in once. After five attempts at logging in I am locked out. And of course I did not setup the email functionality, so there is no hope in resetting that way.

 So here I am, locked out of my new blog, wanting to blog. If you have found yourself in a similar situation then you can follow theses steps to unlock your account so you can enter the correct password after drinking some coffee. (If you don't remember your password, coffee or not, this likely won't help you much.)

 First we will need to install sqlite3, in case you don't already have it (I didn't):

 $ sudo apt-get install sqlite3

 You will then want to navigate to your installation directory, typical locations include /var/www/ghost/, from there you want ./content/data, so let's go there:

 $ cd /var/www/ghost/content/data/

 Here you'll find ghost.db and README.md. We are going to be changing some values in the database with sqlite3. (Surprise, surprise.) Let's fire up the database, making sure to login as root (with sudo), else we'll be unable to change anything, as it'll be readonly:

 $ sudo sqlite3 ghost.db

 We then can check our users and see that we really are locked out:

 sqlite> select * from users;

 This will display a single long line, likely with a value of "locked" somewhere in it. That is what we've come here to change. We want to set it to the value "active", to do so run:

 sqlite> update users set status = "active";

 We can check that we were successful with another:

 sqlite> select * from users;

 After confirmation, excite sqlite3 with:

 sqlite> .exit

 Now, navigate back your sign in page, take another sip of that coffee, and enter your password correctly this time. Now that you've hopefully logged in, it's time to actually setup that mailing functionality! (Or if you're anything like me, not worry about it, since you now know how to unlock yourself in the event of further stupidity lack of coffee...)

** [[https://stackoverflow.com/questions/24804928/singler-line-ffmpeg-cmd-to-merge-video-audio-and-retain-both-audios][Singler line FFMPEG cmd to Merge Video /Audio and retain both audios - Stack Overflow]] :website:
 [2016-09-15 Thu 02:39] 3.Merge video file and audio file(video.mp4+audiofinal.mp3=output.mp4)

 ffmpeg.exe -i video.mp4 -i audio.mp3 -map 0:v -map 1:a -c copy -y output.mp4

** [[https://stackoverflow.com/questions/1908610/how-to-get-pid-of-background-process][shell - How to get PID of background process? - Stack Overflow]] :website:
 [2016-09-18 Sun 00:48] pgrep can get you all of the child PIDs of a parent process. As mentioned earlier $$ is the current scripts PID. So, if you want a script that cleans up after itself, this should do the trick:

 trap 'kill $( pgrep -P $$ | tr "\n" " " )' SIGINT SIGTERM EXIT

** [[http://manuel.kiessling.net/2013/03/19/converting-a-running-physical-machine-to-a-kvm-virtual-machine/][Converting a running physical machine to a KVM virtual machine » The Log Book of Manuel Kiessling]] :website:
 [2016-09-18 Sun 16:45] Converting a running physical machine to a KVM virtual machine
 March 19, 2013
 Let’s assume you have a physical machine running a Linux system, and you would like to convert this system into a virtual KVM/QEMU machine, keeping everything as close to the original as possible. What follows is my approach.

 The first thing we need is a raw image file which mirrors the exact layout of the physical hard drive in our physical server.

 In our example scenario, the physical box has one hard drive at /dev/sda with a /boot Partition on /dev/sda2 and a physical LVM volume on /dev/sda3. This LVM volume houses a volume group with two logical volumes, one of them housing the root partition /, and the other one being unused. Also, /dev/sda1 is unused. Grub is installed into the Master Boot Record.

 (While this setup may sound like it doesn’t make too much sense, trust me that I encountered this very setup the other day. The good news is that it’s an excellent example case because it is quite complicated, which gives me the chance to explain a lot of different concepts and solutions in detail.)

 We need to recreate this hard drive in the virtual world. If we could stop the server, this would actually be quite simple: shutdown the machine, boot from a linux rescue cd, and dd every single byte from /dev/sda into a raw image file. This might even work when done from a running system where the disk is mounted, at least to a certain degree. But if you want to learn about all the little details that make up hard drive partitions and their file system, then continue reading.

 Let’s look at the layout of the physical disk with fdisk -ul /dev/sda:

 Disk /dev/sda: 299.4 GB, 299439751168 bytes
 255 heads, 63 sectors/track, 36404 cylinders, total 584843264 sectors
 Units = sectors of 1 * 512 = 512 bytes

    Device Boot      Start         End      Blocks   Id  System
 /dev/sda1   *          63     1012094      506016    b  W95 FAT32
 /dev/sda2         1012095     1220939      104422+  83  Linux
 /dev/sda3         1220940   584830259   291804660   8e  Linux LVM
 Next, we need to switch to our KVM host server and create a raw image file that is exactly the same size as the physical hard drive (which, according to the first line of fdisk’s output, is 299.4 GB, or 299439751168 bytes):

 # qemu-img create image.raw 299439751168
 We could now re-create the partitioning scheme of the physical disk on the image by hand, but there is a simple shortcut: we only need to write the first 512 bytes of the physical disk into the first 512 bytes of the image. That’s the Master Boot Record (MBR) where all partitioning information resides.

 dd is the tool of choice for reading and writing raw bytes. We use the following to read the MBR from our physical disk:

 # dd if=/dev/sda of=./mbr.bin bs=512 count=1
 It will write exactly one 512 byte block into a file called mbr.bin. Transfer this file to your KVM host, then write its content into the image file:

 # dd if=./mbr.bin of=./image.raw bs=512 count=1 conv=notrunc
 This writes exactly one block of 512 bytes into the image, and does not truncate the rest of the image.

 Now run

 # fdisk -l image.raw
 to verify that the image file now has a partition layout which mirrors that of the physical disk:

     Device Boot      Start         End      Blocks   Id  System
 image.raw1   *          63     1012094      506016    b  W95 FAT32
 image.raw2         1012095     1220939      104422+  83  Linux
 image.raw3         1220940   584830259   291804660   8e  Linux LVM
 Now we can start to create filesystems on our imagefile’s partitions. But to create file systems, we need to address these partitions as devices. losetup comes to the rescue, because it allows us to present parts of a raw image file to the host system as loopback devices.

 We need to create two loopback devices, one for the sda2 partition (/boot on our physical system), and one for the sda3 partition, which is a physical LVM volume. Afterwards, we will be able to use the sda2 loopback device directly – because of LVM, sda3 needs some extra care, as we will see.

 Here is how we create a loopback device /dev/loop0 which points at the section of image.raw that makes up the sda2 partition:

 # losetup /dev/loop0 image.raw -o 518192640 --sizelimit 106928128
 You probably wonder where those insane numbers come from. It’s actually quite simple: The image file is, of course, just one continuous stream of bytes. A certain range of bytes within this stream represents the sda2 partition we just created on the image file. We don’t want the loopback device to point at the whole image file, but rather on the sda2 section only. And this section starts at byte 518192640 (the offset) and ends 106928128 bytes later (the sizelimit). How do we know? This is the calculation:

 offset = partition start block * 512
 sizelimit = (partition end block - partition start block) * 512
 See the output of fdisk -l image.raw above for the partition start and end block numbers.

 We now have a loopback device /dev/loop0 that looks and feels just like a real physical device – in this case, a hard disk partition. As this, it can be formatted:

 # mkfs.ext3 /dev/loop0
 Great, so now we have the /boot partition of our virtual server available, with the same layout as on our physical server. Let’s tackle the LVM volume on /dev/sda3 next.

 What we need is the LVM header from our physical server’s disk. Again, dd is the tool of choice:

 # dd if=/dev/sda3 of=lvmheader.bin bs=512 count=24
 This writes the first 24 blocks of 512 bytes into the file lvmheader.bin. It’s the part if partition sda3 where the layout of the LVM setup is described. Just like the MBR, this needs to be transferred to our KVM host and must be written to the right place within our raw image file.

 To do so, we will create another loopback device, /dev/loop1, which points at the byte section for the sda3 partition within our image file:

 # losetup /dev/loop0 image.raw -o 625121280 --sizelimit 298807971328
 The numbers were calculated accordingly, of course.

 Now we can write the LVM header:

 # dd if=lvmheader.bin of=/dev/loop1 bs=512 count=24 conv=notrunc
 Afterwards, you can run

 # pvs
 which should display the newly found LVM volume group:
   PV         VG         Fmt  Attr PSize   PFree
   /dev/loop0 VolGroup00 lvm2 a-   278.28g    0
 Run

 # lvm vgchange -ay
 to activate it. Now, when running

 # lvm lvs
 its volumes should be listed like this:

   LV       VG         Attr   LSize   Origin Snap%  Move Log Copy%  Convert
   LogVol00 VolGroup00 -wi-a- 268.53g                                      
   LogVol01 VolGroup00 -wi-a-   9.75g
 At this point, the logical volume that will house the root partition can be accessed, and therefore we can format it:

 # mkfs.ext3 /dev/mapper/VolGroup00-LogVol00
 With this, we reached the point where we can mount the root and the /boot partition from the image on our KVM host:

 # mount /dev/mapper/VolGroup00-LogVol00 /mnt
 # mkdir /mnt/boot
 # mount /dev/loop0 /mnt/boot
 Next, we can copy over all the files from our physical server to the mounted image partitions on the KVM host. This could be done using rsync, for example:

 # rsync -aAXvP / your.kvm.host:/mnt/ \
 --delete \
 --exclude={/dev/*,/proc/*,/sys/*,/tmp/*,/run/*,/mnt/*,/media/*,/lost+found,/home/*/.gvfs}
 The nice here is that you can transfer the files on-the-fly from the running system. Of course, at one point you need to make a “last sync” just before the virtual machine replaces the physical machine. However, you can transfer most of the data beforehand, and when the moment comes, you can shut down all services like databases, crond etc. and do the last sync in a relatively short time window.

 Once this is done, we have a working, bootable KVM raw image. We could now unmount the partitions and import the image as a new virtual machine, like so:

 # virt-install \
  -n mymachine \
  -r 512 \
  --os-variant rhel5.4 \
  --disk /var/lib/libvirt/images/image.raw,device=disk,bus=virtio,cache=none \
  --nonetworks \
  --graphics vnc,listen=0.0.0.0,port=5910 \
  --import \
  --prompt
 In case the VM does not boot, one reason could be that its initrd does not have the virtio drivers and thus cannot access the virtual drive. In this case, you must build a new initrd as follows:

 If you still have the partitions mounted, bind the raw image file itself into the mounted filesystem, like so:

 # mkdir /mnt/images
 # mount --bind /var/lib/libvirt/images/image.raw /mnt/images
 Now, chroot into your VM’s root partition:

 # chroot /mnt
 In there you must mount the /proc pseudo-filesystem, remove your current initrd image, and build a new one with the virtio drivers included:
 # mount -t proc none /proc
 # rm /boot/initrd.img
 # mkinitrd --with virtio_pci --with virtio_blk /boot/initrd.img the.kernel.version
 # umount /proc
 # exit
 Don’t forget to unmount everything afterwards:

 # umount /mnt/boot
 # umount /mnt/images
 # umount /mnt

** [[http://docs.openstack.org/image-guide/convert-images.html][OpenStack Docs: Converting between image formats]] :website:
 [2016-09-18 Sun 19:30] Converting between image formats

  
 UPDATED: 2016-09-18 15:35
 Contents
 qemu-img convert: raw, qcow2, qed, vdi, vmdk, vhd
 VBoxManage: VDI (VirtualBox) to raw
 Converting images from one format to another is generally straightforward.

 qemu-img convert: raw, qcow2, qed, vdi, vmdk, vhd¶

 The qemu-img convert command can do conversion between multiple formats, including qcow2, qed, raw, vdi, vhd, and vmdk.

 qemu-img format strings
 Image format    Argument to qemu-img
 QCOW2 (KVM, Xen)        qcow2
 QED (KVM)       qed
 raw     raw
 VDI (VirtualBox)        vdi
 VHD (Hyper-V)   vpc
 VMDK (VMware)   vmdk
 This example will convert a raw image file named image.img to a qcow2 image file.

 $ qemu-img convert -f raw -O qcow2 image.img image.qcow2
 Run the following command to convert a vmdk image file to a raw image file.

 $ qemu-img convert -f vmdk -O raw image.vmdk image.img
 Run the following command to convert a vmdk image file to a qcow2 image file.

 $ qemu-img convert -f vmdk -O qcow2 image.vmdk image.qcow2
 Note

 The -f format flag is optional. If omitted, qemu-img will try to infer the image format.

 When converting an image file with Windows, ensure the virtio driver is installed. Otherwise, you will get a blue screen when launching the image due to lack of the virtio driver. Another option is to set the image properties as below when you update the image in the Image service to avoid this issue, but it will reduce virtual machine performance significantly.

 $ openstack image set --property hw_disk_bus='ide' image_name_or_id
 VBoxManage: VDI (VirtualBox) to raw¶

 If you’ve created a VDI image using VirtualBox, you can convert it to raw format using the VBoxManage command-line tool that ships with VirtualBox. On Mac OS X, and Linux, VirtualBox stores images by default in the ~/VirtualBox VMs/ directory. The following example creates a raw image in the current directory from a VirtualBox VDI image.

 $ VBoxManage clonehd ~/VirtualBox\ VMs/image.vdi image.img --format raw

** [[http://www.howtogeek.com/205393/gatekeeper-101-why-your-mac-only-allows-apple-approved-software-by-default/][How to Open Apps from “Unidentified Developers” on Your Mac]] :website:
 [2016-09-23 Fri 17:54] Run the following command in the Terminal window and provide your password:

 sudo spctl --master-disable


 After you do, head to System Preferences > Security & Privacy. You’ll find that the old “Anywhere” option has returned and is enabled.

 Your Mac will now behave as it used to if you selected the “Anywhere” setting, and unsigned apps will run without any problem.

 To undo this change, just select “App Store and identified developers” or “App Store” in the Security & Privacy pane.

** [[http://www.computerworld.com/article/2693361/unix-tip-using-bash-s-regular-expressions.html][Using bash regex]] :website:
 [2016-09-24 Sat 03:13] Since version 3 (circa 2004), bash has a built-in regular expression comparison operator, represented by =~. A lot of scripting tricks that use grep or sed can now be handled by bash expressions and the bash expressions might just give you scripts that are easier to read and maintain. As with other comparison operators (e.g., -lt or ==), bash will return a zero if an expression like $digit =~ "[[0-9]]" shows that the variable on the left matches the expression on the right and a one otherwise. This example test asks whether the value of $digit matches a single digit.

 if [[ $digit =~ [0-9] ]]; then
     echo "$digit is a digit"
 else
     echo "oops"
 fi
 You can also check whether a reply to a prompt is numeric with similar syntax:

 echo -n "Your answer> "
 read REPLY
 if [[ $REPLY =~ ^[0-9]+$ ]]; then
     echo Numeric
 else
     echo Non-numeric
 fi
 Bash's regex can be fairly complicated. In the test below, we're asking whether the value of our $email variable looks like an email address. Notice that the first expression (the account name) can contain letters, digits and some special characters. The + to the right of the first ] means that we can have any number of such characters. We then see the @ sign sitting between the username and the email domain -- and a literal dot (\.) between the primary part of the domain name and the "com", "net", "gov", etc. part. The comparison is then enclosed in double brackets.

 if [[ "$email" =~ "^[A-Za-z0-9._%+-]+<b>@</b>[A-Za-z0-9.-]+<b>\.</b>[A-Za-z]{2,4}$" ]]
 then
     echo "This email address looks fine: $email"
 else
     echo "This email address is flawed: $email"
 fi
 Similarly, you can construct tests that determine whether the value of variables is in the proper format for an IP address:

 #!/bin/bash

 if [ $# != 1 ]; then
     echo "Usage: $0 address"
     exit 1
 else
     ip=$1
 fi

 if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
     echo "Looks like an IPv4 IP address"
 elif [[ $ip =~ ^[A-Fa-f0-9:]+$ ]]; then
     echo "Could be an IPv6 IP address"
 else
     echo "oops"
 fi
 Bash also provides for some simplified looping. Want to loop 100 times? Just do something like this:

 for n in {1..100}
 do
     echo $n
 done
 And you can loop through letters or through various ranges of letters or numbers using expressions such as these. You don't have to start with 1 or a and you can move backwards through the list.

 {a..z}
 {z..a}
 {c..f}
 {5..25}
 {10..-10}
 Want to see how these ranges work? You can also just try expanding them with the echo command.

 $echo {a..z}
 a b c d e f g h i j k l m n o p q r s t u v w x y z
 $ echo {5..-1}
 5 4 3 2 1 0 -1
 What a swell shell!

** [[https://github.com/herrbischoff/awesome-osx-command-line][GitHub - herrbischoff/awesome-osx-command-line: Use your OS X terminal shell to do awesome things.]] :website:
 [2016-09-26 Mon 18:59] 
 A curated list of shell commands and tools specific to OS X.

 “You don’t have to know everything. You simply need to know where to find it when necessary.” (John Brunner)


 If you want to contribute, you are highly encouraged to do so. Please read the contribution guidelines.

 For more terminal shell goodness, please also see this list's sister list Awesome Command Line Apps.

 Table of Contents

 Appearance
 Transparency
 Wallpaper
 Applications
 App Store
 Apple Remote Desktop
 Contacts
 Google
 iTunes
 Mail
 Safari
 Sketch
 Skim
 TextEdit
 Backup
 Time Machine
 Developer
 App Icons
 Vim
 Xcode
 Disks and Volumes
 Disk Images
 Dock
 Documents
 Finder
 Files and Folders
 Layout
 Metadata Files
 Opening Things
 Fonts
 Functions
 Hardware
 Bluetooth
 Hardware Information
 Infrared Receiver
 Power Management
 Input Devices
 Keyboard
 Media
 Audio
 Video
 Networking
 Bonjour
 DHCP
 DNS
 Hostname
 Network Preferences
 Networking Tools
 SSH
 TCP/IP
 Wi-Fi
 Package Managers
 Printing
 Security
 Application Firewall
 Gatekeeper
 Passwords
 Physical Access
 Wiping Data
 Search
 Find
 Locate
 System
 AirDrop
 AppleScript
 Basics
 Clipboard
 Date and Time
 FileVault
 Information/Reports
 Install OS
 Kernel Extensions
 LaunchAgents
 LaunchServices
 Login Window
 Memory Management
 Notification Center
 QuickLook
 Remote Apple Events
 Root User
 Safe Mode Boot
 Screenshots
 Software Installation
 Software Update
 Spotlight
 System Integrity Protection
 Terminal
 Alternative Terminals
 Shells
 Terminal Fonts
 Appearance

 Transparency

 Transparency in Menu and Windows

 # Reduce Transparency
 defaults write com.apple.universalaccess reduceTransparency -bool true

 # Restore Default Transparency
 defaults write com.apple.universalaccess reduceTransparency -bool false
 Wallpaper

 Set Wallpaper

 # Up to Mountain Lion
 osascript -e 'tell application "Finder" to set desktop picture to POSIX file "/path/to/picture.jpg"'

 # Since Mavericks
 sqlite3 ~/Library/Application\ Support/Dock/desktoppicture.db "update data set value = '/path/to/picture.jpg'" && killall Dock
 Applications

 App Store

 List All Apps Downloaded from App Store

 find /Applications -path '*Contents/_MASReceipt/receipt' -maxdepth 4 -print |\sed 's#.app/Contents/_MASReceipt/receipt#.app#g; s#/Applications/##'
 Show Debug Menu

 # Enable
 defaults write com.apple.appstore ShowDebugMenu -bool true

 # Disable (Default)
 defaults write com.apple.appstore ShowDebugMenu -bool false
 Apple Remote Desktop

 Remove Apple Remote Desktop Settings

 sudo rm -rf /var/db/RemoteManagement ; \
 sudo defaults delete /Library/Preferences/com.apple.RemoteDesktop.plist ; \
 defaults delete ~/Library/Preferences/com.apple.RemoteDesktop.plist ; \
 sudo rm -r /Library/Application\ Support/Apple/Remote\ Desktop/ ; \
 rm -r ~/Library/Application\ Support/Remote\ Desktop/ ; \
 rm -r ~/Library/Containers/com.apple.RemoteDesktop
 Contacts

 Debug Mode

 # Enable
 defaults write com.apple.addressbook ABShowDebugMenu -bool true

 # Disable (Default)
 defaults write com.apple.addressbook ABShowDebugMenu -bool false
 Google

 Uninstall Google Update

 ~/Library/Google/GoogleSoftwareUpdate/GoogleSoftwareUpdate.bundle/Contents/Resources/ksinstall --nuke
 iTunes

 Keyboard Media Keys

 # Stop Responding to Key Presses
 launchctl unload -w /System/Library/LaunchAgents/com.apple.rcd.plist

 # Respond to Key Presses (Default)
 launchctl load -w /System/Library/LaunchAgents/com.apple.rcd.plist
 Mail

 Show Attachments as Icons

 defaults write com.apple.mail DisableInlineAttachmentViewing -bool yes
 Vacuum Mail Index

 The AppleScript code below will quit Mail, vacuum the SQLite index, then re-open Mail. On a large email database that hasn't been optimized for a while, this can provide significant improvements in responsiveness and speed.

 (*
 Speed up Mail.app by vacuuming the Envelope Index
 Code from: http://www.hawkwings.net/2007/03/03/scripts-to-automate-the-mailapp-envelope-speed-trick/
 Originally by "pmbuko" with modifications by Romulo
 Updated by Brett Terpstra 2012
 Updated by Mathias Törnblom 2015 to support V3 in El Capitan and still keep backwards compatibility
 *)

 tell application "Mail" to quit
 set os_version to do shell script "sw_vers -productVersion"
 set mail_version to "V2"
 considering numeric strings
     if "10.10" <= os_version then set mail_version to "V3"
 end considering

 set sizeBefore to do shell script "ls -lnah ~/Library/Mail/" & mail_version & "/MailData | grep -E 'Envelope Index$' | awk {'print $5'}"
 do shell script "/usr/bin/sqlite3 ~/Library/Mail/" & mail_version & "/MailData/Envelope\\ Index vacuum"

 set sizeAfter to do shell script "ls -lnah ~/Library/Mail/" & mail_version & "/MailData | grep -E 'Envelope Index$' | awk {'print $5'}"

 display dialog ("Mail index before: " & sizeBefore & return & "Mail index after: " & sizeAfter & return & return & "Enjoy the new speed!")

 tell application "Mail" to activate
 Safari

 Enable Develop Menu and Web Inspector

 defaults write com.apple.Safari IncludeInternalDebugMenu -bool true && \
 defaults write com.apple.Safari IncludeDevelopMenu -bool true && \
 defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true && \
 defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true && \
 defaults write NSGlobalDomain WebKitDeveloperExtras -bool true
 Get Current Page Data

 Other options: get source, get text.

 osascript -e 'tell application "Safari" to get URL of current tab of front window'
 Sketch

 Export Compact SVGs

 defaults write com.bohemiancoding.sketch3 exportCompactSVG -bool yes
 Skim

 Turn Off Auto Reload Dialog

 Removes the dialog and defaults to auto reload.

 defaults write -app Skim SKAutoReloadFileUpdate -boolean true
 TextEdit

 Use Plain Text Mode as Default

 defaults write com.apple.TextEdit RichText -int 0
 Backup

 Time Machine

 Change Backup Interval

 This changes the interval to 30 minutes. The integer value is the time in seconds.

 sudo defaults write /System/Library/Launch Daemons/com.apple.backupd-auto StartInterval -int 1800
 Local Backups

 Whether Time Machine performs local backups while the Time Machine backup volume is not available.

 # Disable
 sudo tmutil disablelocal

 # Enable (Default)
 sudo tmutil enablelocal
 Prevent Time Machine from Prompting to Use New Hard Drives as Backup Volume

 defaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true
 Set Status

 # Disable Local Time Machine Backups
 hash tmutil &> /dev/null && sudo tmutil disablelocal

 # Enable Local Time Machine Backups (Default)
 hash tmutil &> /dev/null && sudo tmutil enablelocal
 Developer

 Vim

 Compile Sane Vim

 Compiling MacVim via Homebrew with all bells and whistles, including overriding system Vim.

 brew install macvim --HEAD --with-cscope --with-lua --with-override-system-vim --with-luajit --with-python
 Neovim

 Install the development version of this modern Vim drop-in alternative via Homebrew.

 brew tap neovim/neovim && \
 brew install neovim
 Xcode

 Install Command Line Tools without Xcode

 xcode-select --install
 Remove All Unavailable Simulators

 xcrun simctl delete unavailable
 Disks and Volumes

 Disable Sudden Motion Sensor

 Leaving this turned on is useless when you're using SSDs.

 sudo pmset -a sms 0
 Eject All Mountable Volumes

 The only reliable way to do this is by sending an AppleScript command to Finder.

 osascript -e 'tell application "Finder" to eject (every disk whose ejectable is true)'
 Repair File Permissions

 You don't have to use the Disk Utility GUI for this.

 sudo diskutil repairPermissions /
 Beginning with OS X El Capitan, system file permissions are automatically protected. It's no longer necessary to verify or repair permissions with Disk Utility. (Source)
 Set Boot Volume

 bless --mount "/path/to/mounted/volume" --setBoot
 Show All Attached Disks and Partitions

 diskutil list
 View File System Usage

 A continuous stream of file system access info.

 sudo fs_usage
 Disk Images

 Create Disk Image From Folder Contents

 hdiutil create -volname "Volume Name" -srcfolder /path/to/folder -ov diskimage.dmg
 If you'd like to encrypt the disk image:

 hdiutil create -encryption -stdinpass -volname "Volume Name" -srcfolder /path/to/folder -ov encrypted.dmg
 By default, you'll be prompted for a password. You can automate that by piping in a password:

 echo -n YourPassword | hdiutil create -encryption -stdinpass -volname "Volume Name" -srcfolder /path/to/folder -ov encrypted.dmg
 Burn Disk Images to DVD

 This command applies to .iso, .img and .dmg images.

 hdiutil burn /path/to/image_file
 Disable Disk Image Verification

 defaults write com.apple.frameworks.diskimages skip-verify -bool true && \
 defaults write com.apple.frameworks.diskimages skip-verify-locked -bool true && \
 defaults write com.apple.frameworks.diskimages skip-verify-remote -bool true
 Make Volume OS X Bootable

 bless --folder "/path/to/mounted/volume/System/Library/CoreServices" --bootinfo --bootefi
 Mount Disk Image

 hdiutil attach /path/to/diskimage.dmg
 Unmount Disk Image

 hdiutil detach /dev/disk2s1
 Write Disk Image to Volume

 Like the Disk Utility "Restore" function.

 sudo asr -restore -noverify -source /path/to/diskimage.dmg -target /Volumes/VolumeToRestoreTo
 Dock

 Add a Stack with Recent Applications

 defaults write com.apple.dock persistent-others -array-add '{ "tile-data" = { "list-type" = 1; }; "tile-type" = "recents-tile"; }' && \
 killall Dock
 Add a Space

 defaults write com.apple.dock persistent-apps -array-add '{"tile-type"="spacer-tile";}' && \
 killall Dock
 Icon Bounce

 Global setting whether Dock icons should bounce when the respective application demands your attention.

 # Enable (Default)
 defaults write com.apple.dock no-bouncing -bool true && \
 killall Dock

 # Disable
 defaults write com.apple.dock no-bouncing -bool false && \
 killall Dock
 Reset Dock

 defaults delete com.apple.dock && \
 killall Dock
 Scroll Gestures

 Use your touchpad or mouse scroll wheel to interact with Dock items. Allows you to use an upward scrolling gesture to open stacks. Using the same gesture on applications that are running invokes Exposé/Mission Control.

 # Enable
 defaults write com.apple.dock scroll-to-open -bool true && \
 killall Dock

 # Disable (Default)
 defaults write com.apple.dock scroll-to-open -bool false && \
 killall Dock
 Set Auto Show/Hide Delay

 The float number defines the show/hide delay in ms.

 defaults write com.apple.Dock autohide-delay -float 0 && \
 killall Dock
 Show Hidden App Icons

 # Enable
 defaults write com.apple.dock showhidden -bool true && \
 killall Dock

 # Disable
 defaults write com.apple.dock showhidden -bool false && \
 killall Dock
 Documents

 Convert File to HTML

 Supported formats are plain text, rich text (rtf) and Microsoft Word (doc/docx).

 textutil -convert html file.ext
 Finder

 Files and Folders

 Clear All ACLs

 sudo chmod -RN /path/to/folder
 Hide Folder in Finder

 chflags hidden /path/to/folder/
 Show All File Extensions

 defaults write NSGlobalDomain AppleShowAllExtensions -bool true
 Show Hidden Files

 # Show All
 defaults write com.apple.finder AppleShowAllFiles true

 # Restore Default File Visibility
 defaults write com.apple.finder AppleShowAllFiles false
 Remove Protected Flag

 sudo chflags -R nouchg /path/to/file/or/folder
 Show Full Path in Finder Title

 defaults write com.apple.finder _FXShowPosixPathInTitle -bool true
 Unhide User Library Folder

 chflags nohidden ~/Library
 Increase Number of Recent Places

 defaults write .GlobalPreferences NSNavRecentPlacesLimit -int 10 && \
 killall Finder
 Layout

 Show "Quit Finder" Menu Item

 Makes possible to see Finder menu item "Quit Finder" with default shortcut Cmd + Q

 # Enable
 defaults write com.apple.finder QuitMenuItem -bool true && \
 killall Finder

 # Disable (Default)
 defaults write com.apple.finder QuitMenuItem -bool false && \
 killall Finder
 Smooth Scrolling

 Useful if you’re on an older Mac that messes up the animation.

 # Disable
 defaults write NSGlobalDomain NSScrollAnimationEnabled -bool false

 # Enable (Default)
 defaults write NSGlobalDomain NSScrollAnimationEnabled -bool true
 Rubberband Scrolling

 # Disable
 defaults write -g NSScrollViewRubberbanding -bool false

 # Enable (Default)
 defaults write -g NSScrollViewRubberbanding -bool true
 Expand Save Panel by Default

 defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true && \
 defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true
 Desktop Icon Visibility

 # Hide Icons
 defaults write com.apple.finder CreateDesktop -bool false && \
 killall Finder

 # Show Icons (Default)
 defaults write com.apple.finder CreateDesktop -bool true && \
 killall Finder
 Path Bar

 # Show
 defaults write com.apple.finder ShowPathbar -bool true

 # Hide (Default)
 defaults write com.apple.finder ShowPathbar -bool false
 Scrollbar Visibility

 Possible values: WhenScrolling, Automatic and Always.

 defaults write NSGlobalDomain AppleShowScrollBars -string "Always"
 Status Bar

 # Show
 defaults write com.apple.finder ShowStatusBar -bool true

 # Hide (Default)
 defaults write com.apple.finder ShowStatusBar -bool false
 Save to Disk by Default

 Sets default save target to be a local disk, not iCloud.

 defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false
 Set Current Folder as Default Search Scope

 defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"
 Set Default Finder Location to Home Folder

 defaults write com.apple.finder NewWindowTarget -string "PfLo" && \
 defaults write com.apple.finder NewWindowTargetPath -string "file://${HOME}"
 Set Sidebar Icon Size

 Sets size to 'medium'.

 defaults write NSGlobalDomain NSTableViewDefaultSizeMode -int 2
 Metadata Files

 Disable Creation of Metadata Files on Network Volumes

 Avoids creation of .DS_Store and AppleDouble files.

 defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true
 Disable Creation of Metadata Files on USB Volumes

 Avoids creation of .DS_Store and AppleDouble files.

 defaults write com.apple.desktopservices DSDontWriteUSBStores -bool true
 Opening Things

 Change Working Directory to Finder Path

 If multiple windows are open, it chooses the top-most one.

 cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
 Open URL

 open https://github.com
 Open File

 open README.md
 Open Applications

 You can open applications using -a.

 open -a "Google Chrome" https://github.com
 Open Folder

 open /path/to/folder/
 Open Current Folder

 open .
 Fonts

 Clear Font Cache for Current User

 To clear font caches for all users, put sudo in front of this command.

 atsutil databases -removeUser && \
 atsutil server -shutdown && \
 atsutil server -ping
 Get SF Mono Fonts

 You need to download and install Xcode 8 beta for this to work. Afterwards they should be available in all applications.

 cp -v /Applications/Xcode-beta.app/Contents/SharedFrameworks/DVTKit.framework/Versions/A/Resources/Fonts/SFMono-* ~/Library/Fonts
 Functions

 Please see this file.

 Hardware

 Bluetooth

 # Status
 defaults read /Library/Preferences/com.apple.Bluetooth ControllerPowerState

 # Enable (Default)
 sudo defaults write /Library/Preferences/com.apple.Bluetooth ControllerPowerState -int 1

 # Disable
 sudo defaults write /Library/Preferences/com.apple.Bluetooth ControllerPowerState -int 0 && \
 sudo killall -HUP blued
 Hardware Information

 List All Hardware Ports

 networksetup -listallhardwareports
 Remaining Battery Percentage

 pmset -g batt | egrep "([0-9]+\%).*" -o --colour=auto | cut -f1 -d';'
 Remaining Battery Time

 pmset -g batt | egrep "([0-9]+\%).*" -o --colour=auto | cut -f3 -d';'
 Show Connected Device's UDID

 system_profiler SPUSBDataType | sed -n -e '/iPad/,/Serial/p' -e '/iPhone/,/Serial/p'
 Show Current Screen Resolution

 system_profiler SPDisplaysDataType | grep Resolution
 Show CPU Brand String

 sysctl -n machdep.cpu.brand_string
 Infrared Receiver

 # Status
 defaults read /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled

 # Enable (Default)
 defaults write /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled -int 1

 # Disable
 defaults write /Library/Preferences/com.apple.driver.AppleIRController DeviceEnabled -int 0
 Power Management

 Prevent System Sleep

 Prevent sleep for 1 hour:

 caffeinate -u -t 3600
 Show All Power Management Settings

 sudo pmset -g
 Put Display to Sleep after 15 Minutes of Inactivity

 sudo pmset displaysleep 15
 Put Computer to Sleep after 30 Minutes of Inactivity

 sudo pmset sleep 30
 Check System Sleep Idle Time

 sudo systemsetup -getcomputersleep
 Set System Sleep Idle Time to 60 Minutes

 sudo systemsetup -setcomputersleep 60
 Turn Off System Sleep Completely

 sudo systemsetup -setcomputersleep Never
 Automatic Restart on System Freeze

 sudo systemsetup -setrestartfreeze on
 Chime When Charging

 Play iOS charging sound when MagSafe is connected.

 # Enable
 defaults write com.apple.PowerChime ChimeOnAllHardware -bool true && \
 open /System/Library/CoreServices/PowerChime.app

 # Disable (Default)
 defaults write com.apple.PowerChime ChimeOnAllHardware -bool false && \
 killall PowerChime
 Input Devices

 Keyboard

 Auto-Correct

 # Disable
 defaults write -g NSAutomaticSpellingCorrectionEnabled -bool false

 # Enable (Default)
 defaults write -g NSAutomaticSpellingCorrectionEnabled -bool true

 # Show Status
 defaults read -g NSAutomaticSpellingCorrectionEnabled
 Key Repeat

 Disable the default "press and hold" behavior.

 # Enable Key Repeat
 defaults write -g ApplePressAndHoldEnabled -bool false

 # Disable Key Repeat
 defaults write -g ApplePressAndHoldEnabled -bool true
 Key Repeat Rate

 Sets a very fast repeat rate, adjust to taste.

 defaults write NSGlobalDomain KeyRepeat -int 0.02
 Media

 Audio

 Convert Audio File to iPhone Ringtone

 afconvert input.mp3 ringtone.m4r -f m4af
 Create Audiobook From Text

 Uses "Alex" voice, a plain UTF-8 encoded text file for input and AAC output.

 say -v Alex -f file.txt -o "output.m4a"
 Disable Sound Effects on Boot

 sudo nvram SystemAudioVolume=" "
 Mute Audio Output

 osascript -e 'set volume output muted true'
 Set Audio Volume

 osascript -e 'set volume 4'
 Play Audio File

 You can play all audio formats that are natively supported by QuickTime.

 afplay -q 1 filename.mp3
 Speak Text with System Default Voice

 say 'All your base are belong to us!'
 Video

 Auto-Play Videos in QuickTime Player

 defaults write com.apple.QuickTimePlayerX MGPlayMovieOnOpen 1
 Networking

 Bonjour

 Bonjour Service

 # Disable
 sudo defaults write /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist ProgramArguments -array-add "-NoMulticastAdvertisements"

 # Enable (Default)
 sudo defaults write /System/Library/LaunchDaemons/com.apple.mDNSResponder.plist ProgramArguments -array "/usr/sbin/mDNSResponder" "-launchd"
 DHCP

 Renew DHCP Lease

 sudo ipconfig set en0 DHCP
 Show DHCP Info

 ipconfig getpacket en0
 DNS

 Clear DNS Cache

 sudo dscacheutil -flushcache && \
 sudo killall -HUP mDNSResponder
 Hostname

 Set Computer Name/Host Name

 sudo scutil --set ComputerName "newhostname" && \
 sudo scutil --set HostName "newhostname" && \
 sudo scutil --set LocalHostName "newhostname" && \
 sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "newhostname"
 Network Preferences

 Network Locations

 Switch between network locations created in the Network preference pane.

 # Status
 scselect

 # Switch Network Location
 scselect LocationNameFromStatus
 Networking Tools

 Ping a Host to See Whether It’s Available

 ping -o github.com
 Troubleshoot Routing Problems

 traceroute github.com
 SSH

 Remote Login

 # Enable remote login
 sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist

 # Disable remote login
 sudo launchctl unload -w /System/Library/LaunchDaemons/ssh.plist
 TCP/IP

 Show Application Using a Certain Port

 This outputs all applications currently using port 80.

 sudo lsof -i :80
 Show External IP Address

 dig +short myip.opendns.com @resolver1.opendns.com
 Wi-Fi

 Join a Wi-Fi Network

 networksetup -setairportnetwork en0 WIFI_SSID WIFI_PASSWORD
 Scan Available Access Points

 Create a symbolic link to the airport command for easy access:

 sudo ln -s /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport /usr/local/bin/airport
 Run a wireless scan:

 airport -s
 Show Current SSID

 /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | awk '/ SSID/ {print substr($0, index($0, $2))}'
 Show Local IP Address

 ipconfig getifaddr en0
 Show Wi-Fi Connection History

 defaults read /Library/Preferences/SystemConfiguration/com.apple.airport.preferences | grep LastConnected -A 7
 Show Wi-Fi Network Passwords

 Exchange SSID with the SSID of the access point you wish to query the password from.

 security find-generic-password -D "AirPort network password" -a "SSID" -gw
 Turn on Wi-Fi Adapter

 networksetup -setairportpower en0 on
 Package Managers

 Fink - The full world of Unix Open Source software for Darwin. A little outdated.
 Homebrew - The missing package manager for OS X. The most popular choice.
 MacPorts - Compile, install and upgrade either command-line, X11 or Aqua based open-source software. Very clean, it's what I use.
 Printing

 Clear Print Queue

 cancel -a -
 Expand Print Panel by Default

 defaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true && \
 defaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true
 Quit Printer App After Print Jobs Complete

 defaults write com.apple.print.PrintingPrefs "Quit When Finished" -bool true
 Security

 Application Firewall

 Firewall Service

 # Show Status
 sudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate

 # Enable
 sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate on

 # Disable (Default)
 sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate off
 Add Application to Firewall

 sudo /usr/libexec/ApplicationFirewall/socketfilterfw --add /path/to/file
 Gatekeeper

 Add Gatekeeper Exception

 spctl --add /path/to/Application.app
 Remove Gatekeeper Exception

 spctl --remove /path/to/Application.app
 Passwords

 Generate Secure Password and Copy to Clipboard

 tr -dc A-Za-z0-9_ < /dev/urandom | head -c 20 | pbcopy
 Physical Access

 Launch Screen Saver

 open /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app
 Lock Screen

 /System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend
 Screensaver Immediate Lock

 # Status
 defaults read com.apple.screensaver askForPasswordDelay

 # Enable (Default)
 defaults write com.apple.screensaver askForPasswordDelay -int 0

 # Disable (Integer = lock delay in seconds)
 defaults write com.apple.screensaver askForPasswordDelay -int 10
 Screensaver Password

 # Status
 defaults read com.apple.screensaver askForPassword

 # Enable
 defaults write com.apple.screensaver askForPassword -int 1

 # Disable (Default)
 defaults write com.apple.screensaver askForPassword -int 0
 Wiping Data

 Securely Remove File

 srm /path/to/file
 Securely Remove Folder

 srm -r /path/to/folder/
 Securely Remove Path (Force)

 srm -rf /path/to/complete/destruction
 Search

 Find

 Recursively Delete .DS_Store Files

 find . -type f -name '*.DS_Store' -ls -delete
 Locate

 Build Locate Database

 sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist
 Search via Locate

 The -i modifier makes the search case insensitive.

 locate -i *.jpg
 System

 AirDrop

 # Enable AirDrop over Ethernet and on Unsupported Macs
 defaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool true

 # Enable (Default)
 defaults remove com.apple.NetworkBrowser DisableAirDrop

 # Disable
 defaults write com.apple.NetworkBrowser DisableAirDrop -bool YES
 AppleScript

 Execute AppleScript

 osascript /path/to/script.scpt
 Basics

 Compare Two Folders

 diff -qr /path/to/folder1 /path/to/folder2
 Restore Sane Shell

 In case your shell session went insane (some script or application turned it into a garbled mess).

 stty sane
 Restart

 sudo reboot
 Shutdown

 sudo poweroff
 Show Build Number of OS

 sw_vers
 Uptime

 How long since your last restart.

 uptime
 Clipboard

 Copy data to Clipboard

 cat whatever.txt | pbcopy
 Convert Clipboard to Plain Text

 pbpaste | textutil -convert txt -stdin -stdout -encoding 30 | pbcopy
 Convert Tabs to Spaces for Clipboard Content

 pbpaste | expand | pbcopy
 Copy data from Clipboard

 pbpaste > whatever.txt
 Sort and Strip Duplicate Lines from Clipboard Content

 pbpaste | sort | uniq | pbcopy
 FileVault

 Automatically Unlock FileVault on Restart

 If FileVault is enabled on the current volume, it restarts the system, bypassing the initial unlock. The command may not work on all systems.

 sudo fdesetup authrestart
 FileVault Service

 # Status
 sudo fdesetup status

 # Enable
 sudo fdesetup enable

 # Disable (Default)
 sudo fdestatus disable
 Information/Reports

 Generate Advanced System and Performance Report

 sudo sysdiagnose -f ~/Desktop/
 Install OS

 Create Bootable Installer

 # El Capitan
 sudo /Applications/Install\ OS\ X\ El\ Capitan.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume --applicationpath /Applications/Install\ OS\ X\ El\ Capitan.app

 # Yosemite
 sudo /Applications/Install\ OS\ X\ Yosemite.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume --applicationpath /Applications/Install\ OS\ X\ Yosemite.app

 # Mavericks
 sudo /Applications/Install\ OS\ X\ Mavericks.app/Contents/Resources/createinstallmedia --volume /Volumes/MyVolume --applicationpath /Applications/Install\ OS\ X\ Mavericks.app
 Kernel Extensions

 Display Status of Loaded Kernel Extensions

 sudo kextstat -l
 Load Kernel Extension

 sudo kextload -b com.apple.driver.ExampleBundle
 Unload Kernel Extensions

 sudo kextunload -b com.apple.driver.ExampleBundle
 LaunchAgents

 Please see this file.

 LaunchServices

 Rebuild LaunchServices Database

 To be independent of OS X version, this relies on locate to find lsregister. If you do not have your locate database built yet, do it.

 sudo $(locate lsregister) -kill -seed -r
 Login Window

 Set Login Window Text

 sudo defaults write /Library/Preferences/com.apple.loginwindow LoginwindowText "Your text"
 Memory Management

 Purge memory cache

 sudo purge
 Show Memory Statistics

 # One time
 vm_stat

 # Table of data, repeat 10 times total, 1 second wait between each poll
 vm_stat -c 10 1
 Notification Center

 Notification Center Service

 # Disable
 launchctl unload -w /System/Library/LaunchAgents/com.apple.notificationcenterui.plist && \
 killall -9 NotificationCenter

 # Enable (Default)
 launchctl load -w /System/Library/LaunchAgents/com.apple.notificationcenterui.plist
 QuickLook

 Preview via QuickLook

 qlmanage -p /path/to/file
 Remote Apple Events

 # Status
 sudo systemsetup -getremoteappleevents

 # Enable
 sudo systemsetup -setremoteappleevents on

 # Disable (Default)
 sudo systemsetup -setremoteappleevents off
 Root User

 # Enable
 dsenableroot

 # Disable
 dsenableroot -d
 Safe Mode Boot

 # Status
 nvram boot-args

 # Enable
 sudo nvram boot-args="-x"

 # Disable
 sudo nvram boot-args=""
 Screenshots

 Take Delayed Screenshot

 Takes a screenshot as JPEG after 3 seconds and displays in Preview.

 screencapture -T 3 -t jpg -P delayedpic.jpg
 Save Screenshots to Given Location

 Sets location to ~/Desktop.

 defaults write com.apple.screencapture location ~/Desktop && \
 killall SystemUIServer
 Save Screenshots in Given Format

 Sets format to png. Other options are bmp, gif, jpg, jpeg, pdf, tiff.

 defaults write com.apple.screencapture type -string "png"
 Disable Shadow in Screenshots

 defaults write com.apple.screencapture disable-shadow -bool true && \
 killall SystemUIServer
 Set Default Screenshot Name

 Date and time remain unchanged.

 defaults write com.apple.screencapture name "Example name" && \
 killall SystemUIServer
 Software Installation

 Install PKG

 installer -pkg /path/to/installer.pkg -target /
 Software Update

 Install All Available Software Updates

 sudo softwareupdate -ia
 Set Software Update Check Interval

 Set to check daily instead of weekly.

 defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1
 Show Available Software Updates

 sudo softwareupdate -l
 Set Software Update Server

 This should only be done for testing purposes or unmanaged clients. To use network-wide, either correctly set up DNS along with Apple SUS service and bind your clients via OpenDirectory. Alternatively, use Reposado together with correct network DNS settings to make resolution transparent. Margarita looks nice to have as well.

 # Use own SUS
 sudo defaults write /Library/Preferences/com.apple.SoftwareUpdate CatalogURL http://su.example.com:8088/index.sucatalog

 # Reset to Apple SUS
 sudo defaults delete /Library/Preferences/com.apple.SoftwareUpdate CatalogURL
 Spotlight

 Spotlight Indexing

 # Disable
 mdutil -i off -d /path/to/volume

 # Enable (Default)
 mdutil -i on /path/to/volume
 Erase Spotlight Index and Rebuild

 mdutil -E /path/to/volume
 Search via Spotlight

 mdfind -name 'searchterm'
 Show Spotlight Indexed Metadata

 mdls /path/to/file
 System Integrity Protection

 Disable System Integrity Protection

 Reboot while holding Cmd + R, open the Terminal application and enter:

 csrutil disable && reboot
 Enable System Integrity Protection

 Reboot while holding Cmd + R, open the Terminal application and enter:

 csrutil enable && reboot
 Date and Time

 List Available Timezones

 sudo systemsetup -listtimezones
 Set Timezone

 sudo systemsetup -settimezone Europe/Berlin
 Set Clock Using Network Time

 # Status
 sudo systemsetup getusingnetworktime

 # Enable (Default)
 sudo systemsetup setusingnetworktime on

 # Disable
 sudo systemsetup setusingnetworktime off
 Terminal

 Ring Terminal Bell

 Rings the terminal bell (if enabled) and puts a badge on it.

 tput bel
 Alternative Terminals

 iTerm2 - A better Terminal.app.
 Shells

 Bash

 Install the latest version and set as current users' default shell:

 brew install bash && \
 sudo echo $(brew --prefix)/bin/bash >> /etc/shells && \
 chsh -s $(brew --prefix)/bin/bash
 Homepage - The default shell for OS X and most other Unix-based operating systems.
 Bash-it - Community Bash framework, like Oh My Zsh for Bash.
 fish

 Install the latest version and set as current users' default shell:

 brew install fish && \
 echo $(brew --prefix)/bin/fish | sudo tee -a /etc/shells && \
 chsh -s $(brew --prefix)/bin/fish
 Homepage - A smart and user-friendly command line shell for OS X, Linux, and the rest of the family.
 Fisherman - A blazing fast, modern plugin manager for Fish.
 The Fishshell Framework - Provides core infrastructure to allow you to install packages which extend or modify the look of your shell.
 Installation & Configuration Tutorial - How to Setup Fish Shell with Fisherman, Powerline Fonts, iTerm2 and Budspencer Theme on OS X.
 Zsh

 Install the latest version and set as current users' default shell:

 brew install zsh && \
 sudo sh -c 'echo $(brew --prefix)/bin/zsh >> /etc/shells' && \
 chsh -s $(brew --prefix)/bin/zsh
 Homepage - Zsh is a shell designed for interactive use, although it is also a powerful scripting language.
 Oh My Zsh - An open source, community-driven framework for managing your Zsh configuration.
 Prezto - A speedy Zsh framework. Enriches the command line interface environment with sane defaults, aliases, functions, auto completion, and prompt themes.
 zgen - Another open source framework for managing your zsh configuration. Zgen will load oh-my-zsh compatible plugins and themes and has the advantage of both being faster and automatically cloning any plugins used in your configuration for you.
 Terminal Fonts

 Anonymous Pro - A family of four fixed-width fonts designed with coding in mind.
 Codeface - A gallery and repository of monospaced fonts for developers.
 DejaVu Sans Mono - A font family based on the Vera Fonts.
 Hack - Hack is hand groomed and optically balanced to be your go-to code face.
 Inconsolata - A monospace font, designed for code listings and the like.
 Input - A flexible system of fonts designed specifically for code.
 Meslo - Customized version of Apple's Menlo font.
 Powerline Fonts - Repo of patched fonts for the Powerline plugin.
 Source Code Pro - A monospaced font family for user interfaces and coding environments.

** [[https://www.youtube.com/watch?v=INiRu2_XdJE][ffmpeg crossfade effect - YouTube]] :website:
 [2016-10-02 Sun 14:57] ommand line using ffmpeg:

 ffmpeg -i 1.mp4 -i 2.mp4 -an \
 -filter_complex \
 " [0:v]trim=start=0:end=13.47,setpts=PTS-STARTPTS[firstclip]; [1:v]trim=start=1,setpts=PTS-STARTPTS[secondclip]; [0:v]trim=start=13.47:end=14.47,setpts=PTS-STARTPTS[fadeoutsrc]; [1:v]trim=start=0:end=1,setpts=PTS-STARTPTS[fadeinsrc]; [fadeinsrc]format=pix_fmts=yuva420p, fade=t=in:st=0:d=1:alpha=1[fadein]; [fadeoutsrc]format=pix_fmts=yuva420p, fade=t=out:st=0:d=1:alpha=1[fadeout]; [fadein]fifo[fadeinfifo]; [fadeout]fifo[fadeoutfifo]; [fadeoutfifo][fadeinfifo]overlay[crossfade]; [firstclip][crossfade][secondclip]concat=n=3[output]; [0:a][1:a] acrossfade=d=1 [audio]
 " \
 -map "[output]" -map "[audio]" result.mp4

** [[http://code.nomad-labs.com/2010/03/11/simulating-dropped-packets-aka-crappy-internets-with-iptables/][Simulating dropped packets (aka crappy internets) with iptables | Nomad Labs Code]] :website:
 [2016-10-02 Sun 20:40] To simulate a dropped packets with iptables, you can use the following commands (as root):
 # for randomly dropping 10% of incoming packets:
 iptables -A INPUT -m statistic --mode random --probability 0.1 -j DROP

 # and for dropping 10% of outgoing packets:
 iptables -A OUTPUT -m statistic --mode random --probability 0.1 -j DROP
 Once done, you can use the following for removing these packet-drops:
 # for the incoming packets:
 iptables -D INPUT -m statistic --mode random --probability 0.1 -j DROP

 # and for the outgoing packets
 iptables -D OUTPUT -m statistic --mode random --probability 0.1 -j DROP

** [[https://stackoverflow.com/questions/75533/better-terminal-in-mac-os-x-reversing-the-control-and-command-key-mappings][osx - Better terminal in Mac OS X -- reversing the control and command key-mappings - Stack Overflow]] :website:
 [2016-10-02 Sun 23:54] up vote
 1
 down vote
 The 2016 solution is to use Karabiner open-source program which allows you to remap modifier and other keys with very fine granularity, for example

 Remap only the left ⌘ Cmd or Option key.
 Remap a key only for specific applications, e.g. only inside Terminal, Emacs, or virtual machine.
 For example, here's how to remap left ⌘ Cmd key to act as Ctrl only inside Terminal (and leave the right one unaffected so that you could still use e.g. ⌘ Cmd + Tab to switch between apps):

** [[https://stackoverflow.com/questions/25669809/how-do-you-run-python-code-using-emacs][How do you run Python code using Emacs? - Stack Overflow]] :website:
 [2016-10-05 Wed 23:29] up vote
 7
 down vote
 If you are using emacs24 this should be the default (in emacs23 you need python.el, not python-mode.el):

 In a python buffer:

 C-c C-z : open a python shell
 C-c C-c : run the content of the buffer in the opened python shell
 C-c C-r : run the selected region in the python shell

** [[http://forum.kodi.tv/showthread.php?tid=210549][Using JSON-RPC API v6 to Build a WebSite]] :website:
 [2016-10-14 Fri 15:26] Favourites.GetFavourites() - This works to retrieve the current favourites.
 Had to track down the fields to list in the "properties" array here: https://github.com/xbmc/xbmc/blob/master...tions.cpp:
 Code:
 { "jsonrpc": "2.0", "method": "Favourites.GetFavourites", "params": { "properties": ["window","path","thumbnail","windowparameter"] }, "id": 1 }

** [[https://unix.stackexchange.com/questions/316998/how-to-change-keyboard-layout-in-gnome-3-from-command-line][gnome3 - How to change keyboard layout in gnome 3 from command line - Unix & Linux Stack Exchange]] :website:
 [2016-10-18 Tue 20:49] Using gsettings.

 Setting org.gnome.desktop.input-sources.sources to the null list, "[]", allows you to use the X server keyboard configuration without gnome-shell trying to configure it, so you could be able to do as before.

 $ gsettings set org.gnome.desktop.input-sources sources '[]'

** [[https://askubuntu.com/questions/632164/how-do-i-run-xkbcom-on-ubuntu-gnome-startup][keyboard - How do I run xkbcom on Ubuntu GNOME startup? - Ask Ubuntu]] :website:
 [2016-10-19 Wed 00:58] 
 up vote
 0
 down vote
 Open your text editor of choice and paste this into it

 [Desktop Entry]
 Name=Keyboard
 GenericName=A descriptive name here
 Comment=Some description about your script
 Exec=xkbcomp ~/.keyboard-map $DISPLAY
 Terminal=false
 Type=Application
 X-GNOME-Autostart-enabled=true
 Save this as keyboard.desktop into ~/.config/autostart and make it executable

 sudo chmod +X ~/.config/autostart/keyboard.desktop
 Reboot and it will start at boot.

** [[https://wiki.debian.org/GDM][GDM - Debian Wiki]] :website:
 [2016-10-19 Wed 16:44] Disable gdm 
 This will prevent gdm from loading on boot and login is via console.

 # systemctl set-default multi-user.target

** [[https://wiki.debian.org/GDM][GDM - Debian Wiki]] :website:
 [2016-10-19 Wed 16:54] Usually this will be graphical.target and can be reverted with systemctl set-default graphical.target

** [[https://wiki.debian.org/DebianDesktopHowTo][DebianDesktopHowTo - Debian Wiki]] :website:
 [2016-10-25 Tue 15:00] For network browsing in the thunar file manager, install gvfs-backends and gvfs-fuse, and add your users to the "fuse" group (sudo adduser <user> fuse).

** [[http://www.lifehacker.co.uk/2016/10/27/how-to-disable-chromes-new-suggested-articles-feature][How to Disable Chrome's New 'Suggested Articles' Feature | Lifehacker UK]] :website:
 [2016-10-27 Thu 21:48] When you open a new tab in Chrome 54, if you scroll down you’ll see recently used bookmarks, followed by a list of suggested articles (the same one Google Now shows you that can be a little bit of an echo chamber). If you’re not a fan, open both of the following settings in Chrome and disable them:

 chrome://flags/#enable-ntp-popular-sites

 chrome://flags/#enable-ntp-snippets

 You may have to restart the browser for it to work. Once it’s done, however, those suggested articles should be gone. Enjoy your clean new tab page!

** [[http://www.howtogeek.com/howto/ubuntu/change-the-default-editor-from-nano-on-ubuntu-linux/][Change the Default Editor From Nano on Ubuntu Linux]] :website:
 [2016-10-29 Sat 21:21] It’s really easy to set the default editor using the update-alternatives command. Open up a terminal window and type in the following command:

 sudo update-alternatives --config editor

** [[https://storma.wordpress.com/tag/debian-jessie-polkit-systemd-xfce-hibernate-suspend-shutdown-reboot/][Debian Jessie polkit systemd xfce hibernate suspend shutdown reboot | Here we go again...]] :website:
 [2016-11-03 Thu 02:46] Recently things have changed in regard to policies and the way one logs in.

 If your one of the few, like me, who doesn’t use a *dm for login and has suffered the polkit hassle of no suspend/hibernate or shutdown/reboot with Xfce4, there is a simple fix.

 Parse a ‘– vt1’ to startx. In your .bashrc or .bash_profile, use the line,

 [[ -z $DISPLAY && $XDG_VTNR -eq 1 ]] && exec startx -- vt1

** [[https://unix.stackexchange.com/questions/66654/how-to-mount-usb-stick-on-debian-sid][permissions - How to mount USB stick on Debian Sid? - Unix & Linux Stack Exchange]] :website:
 [2016-11-03 Thu 23:44] such window manager. So it sounds like a problem with polkit to me. Does your system have a directory called /etc/polkit-1/localauthority/? If so, create a file (as root)... I use the nano text editor here. Paste into the terminal with CTRL + SHIFT + V.

 su root
 nano /etc/polkit-1/localauthority/50-local.d/55-storage.pkla
 add the following lines:

 [Storage Permissions]
 Identity=unix-group:plugdev
 Action=org.freedesktop.udisks.filesystem-mount;org.freedesktop.udisks.drive-eject;org.freedesktop.udisks.drive-detach;org.freedesktop.udisks.luks-unlock;org.freedesktop.udisks.inhibit-polling;org.freedesktop.udisks.drive-set-spindown
 ResultAny=yes
 ResultActive=yes
 ResultInactive=no
 now add yourself to the plugdev group:

 usermod -a -G plugdev <your username>
 logout and log back in. If it is polkit, you should be able to mount media now.

** [[https://nowardev.wordpress.com/2015/03/24/ffmpeg-and-the-message-thread-message-queue-blocking-consider-raising-the-thread_queue_size-option-current-value-8-alsa-buffer-xrun/][ffmpeg and the message “Thread message queue blocking; consider raising the thread_queue_size option (current value: 8)” ALSA buffer xrun. | NoWarTools]] :website:
 [2016-11-07 Mon 22:11] ffmpeg -f alsa -ac 1 -ar 48000 -i hw:1,0 -s 1920×1080 -f x11grab -i :0 -r 30 -vcodec libx264 $file
 AND I GOT :
 [alsa @ 0x22d9660] Thread message queue blocking; consider raising the thread_queue_size option (current value: 8)
 [alsa @ 0x22d9660]
 ok …. tried to play the file and -,- weirdo audio
 solution THE NEW FUCKING PARAMETER
 -thread_queue_size 512
 ffmpeg -thread_queue_size 512 -f alsa -ac 1 -ar 48000 -i hw:1,0 -s 1920×1080 -f x11grab -i :0 -r 30 -vcodec libx264 $file
 AND it works now

** [[https://stackoverflow.com/questions/28359855/alsa-buffer-xrun-induced-by-low-quality-source-in-ffmpeg-capture][ALSA buffer xrun induced by low quality source in ffmpeg capture - Stack Overflow]] :website:
 [2016-11-08 Tue 01:13] I was able to solve this problem by adding the -thread_queue_size 1024 option for both the video input and the audio input. Here is my full line:

 ffmpeg -f rawvideo -video_size 720x480 -thread_queue_size 1024 \
   -pixel_format uyvy422 -framerate 29.97 -i - -f alsa -thread_queue_size 1024 \
   -i hw:1 -preset slow -c:v libx264 -aspect 4:3 -strict -2 -y -threads 4 output.mp4
* Emacs
** [[https://www.emacswiki.org/emacs/Magit][EmacsWiki: Magit]] :website:
   :PROPERTIES:
   :ID:       08b908db-4f8b-4d81-be0e-dc1df157ea2c
   :END:
[2016-08-12 Fri 20:51] Getting started with Magit is really easy:

M-x magit-status to see git status, and in the status buffer:
s to stage files
c c to commit (type the message then C-c C-c to actually commit)
b b to switch to another branch
Other handy keys:

P u to do a git push
F u to do a git pull
try to press TAB
** [[https://www.emacswiki.org/emacs/EmacsAsDaemon][EmacsWiki: Emacs As Daemon]] :website:
[2016-08-07 Sun 15:55] Emacs as Daemon on OS X using Launchd

If you’re running Emacs 23, you can run Emacs As Daemon via OS X’s launchd. The easiest solution is to use a tool like Lingon to create the plist file or can create one manually like this:

#+BEGIN_EXAMPLE
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" 
        "http://www.apple.com/DTDs/PropertyList-1.0.dtd"> 
     <plist version="1.0">
      <dict> 
        <key>Label</key>
        <string>gnu.emacs.daemon</string>
        <key>ProgramArguments</key>
        <array>
          <string>/Applications/Emacs.app/Contents/MacOS/Emacs</string>
          <string>--daemon</string>
        </array>
       <key>RunAtLoad</key>
       <true/>
       <key>ServiceDescription</key>
       <string>Gnu Emacs Daemon</string>
       <key>UserName</key>
       <string>[YOUR USERNAME HERE]</string>
      </dict>
    </plist>
#+END_EXAMPLE

This can then be installed in /Library/LaunchAgents and loaded via:

    sudo launchctl load -w /Library/LaunchAgents/gnu.emacs.daemon.plist
** [[https://stackoverflow.com/questions/24833964/package-listed-in-melpa-but-not-found-in-package-install][emacs - Package listed in MELPA, but not found]] :website:
   [2016-08-24 Wed 14:51] M-x package-list-packages

** [[https://emacsclub.github.io/html/org_tutorial.html][Org-mode Tutorial / Cheat Sheet]] :website:
[2016-08-19 Fri 00:53] Headings
It's all about headings in org. Headings such as this are created with * (stars). The number of stars defines the depth of the heading. Pressing <TAB> on headings will minimize/maximize them. Pressing tab multiple times in a row on headings with subheadings will maximize each subheading by depth corresponding to the number of times you pressed <TAB>.

Subheadings

Subheadings can nest within other headings such as this one. This is really convenient for organizing stuff.

"TODO"s (C-c C-t)
TODO's are created by starting headers with the keyword TODO or DONE. You can also create one with C-c C-t on a header. They are meant to represent tasks you wish to create within your organizational document. These can be helpful when planning out projects or assignments.

The TODO cycle

You can turn an existing header into a TODO item by cycling its TODO status. The shortcut for this is C-c C-t (t for todo).

Non-TODO -> TODO -> DONE -> Non-TODO … (with C-c C-t).

Lists
You can create bullets with the - (dash), numbered bullets or lists with #. (number[dot]). Tabbing multiple times changes the indentation of the bullet, but only if there is no text yet. Tabbing multiple levels can get confusing, but if you remember to <TAB> before typing - or #., things tend to work out.

Ordered Lists

item 1
item 2
sub 1
sub 2
subsub 1
Unordered Lists

Start with -, +, or *.

hello
item 2
item 3
subitem 1
sub
subsub
Description Lists

Start with -, +, or * and followed by ::

Matlab is a funny language. 
 - Scope :: Scope doesn't work as expected, and messes everything up
   when loops mix variables up in recursive functions.
 - Namespaces :: You wish. 
 - Header Files :: Nope.
gives

Matlab is a funny language.

Scope
Scope doesn't work as expected, and messes everything up when loops mix variables up in recursive functions.
Namespaces
You wish.
Header Files
Nope.
Text Formatting
Individual words can be bolded with stars, italicized with forward slashes, and underlined with underscores. Also, there is verbatim and strike-through.

*bold* /italics/ _underline_ ~verbatim~ +strike-through+
Tables
Tables can be created from any line that starts with '|' (pipe). A line that starts with '|-' (pipe dash) is considered a horizontal seperator; <TAB> after inserting it to expand the separator.

this    is      a       sample  table
move    from    one     col     to
the     other   with    <TAB>   this column
Some tips:

<TAB> realigns the columns, and moves to the next column. If at end of line, it will create a new row.
C-c C-c will realign the columns without moving or creating new ones.
<RET> moves to the next row.
Table Formatting

When exporting, tables are drawn without cell borders or frames. Here are useful table formatting commands which you place immediately before a table.

This is a table with lines around and between cells
this    is      a       sample  table
move    from    one     col     to
the     other   with    <TAB>   this column
Literal Examples
Literal examples are snippets of text or source code that need to be unformatted on org export. Put this text between #+begin-example and +end_example.

Source Code

Org-mode is great for inserting snippets of code. This can be done with the

#+BEGIN_SRC [major-mode-name] [options]
#+END_SRC
[major-mode-name] adds a lot of extra functionality to these code blocks within your org file. It's also good for whoever is reading to know what the language is.

For example:

1:  int main() { 
2:  return 0; 
3:  }
Useful options and commands.

Options:

-n : add line numbers to the source code.
+n : add line numbers but continue from last SRC snippet.
-r : remove labels from source code
Commands:

C-c ['] : Allows you to edit the source code at point in its native mode. Opens a new buffer where you exit after editing by the command again.
C-c l : calls org-store-link when editing with ~C-c '~. This creates a label at the line currently being edited. It can be retrieved later with C-c C-l.
Easy templates

It gets tiring to use the long tags if you're doing this a lot. These are shortcuts to generate the above snippet borders. To insert, type a '<' followed by a template selector and then <TAB>.

Template selectors:

s    #+begin_src ... #+end_src 
e    #+begin_example ... #+end_example
q    #+begin_quote ... #+end_quote 
v    #+begin_verse ... #+end_verse 
c    #+begin_center ... #+end_center 
l    #+begin_latex ... #+end_latex 
L    #+latex: 
h    #+begin_html ... #+end_html 
H    #+html: 
a    #+begin_ascii ... #+end_ascii 
A    #+ascii: 
i    #+index: line 
I    #+include: line 
Linking
Linking files together

You can link files together with

[[file:filename][name-of-link]]
This will preserve links after export to HTML as well.

Linking sections within a document

You can create a link to a section within your document with the section name in brackets. The second option lets you call the link something else.

[[section-title]]
[[section-title][link-title]]
Exporting (C-c C-e)
You can export org files to any of the supported formats with C-c C-e [option].

C-c C-e will show you the options available in a separate buffer. Common ones are text, html, and latex. You can get PDFs by converting to latex, but you need to have a LaTeX environment installed on your system to use this.

Export Options (C-c C-e t)

When org files are exported, certain variables are set automatically but can be manually set by you. To change a variable's value, use

#+VARIABLE-NAME: value
anywhere in your document. At the top is probably best.

To paste a template of all export options in your org document so that you can set them immediately, use (org-insert-export-options-template), or C-c C-e t.

This will print

#+TITLE:       the title to be shown (default is the buffer name)
#+AUTHOR:      the author (default taken from user-full-name)
#+DATE:        a date, an Org timestamp120, or a format string for format-time-string
#+EMAIL:       his/her email address (default from user-mail-address)
#+DESCRIPTION: the page description, e.g. for the XHTML meta tag
#+KEYWORDS:    the page keywords, e.g. for the XHTML meta tag
#+LANGUAGE:    language for HTML, e.g. ‘en’ (org-export-default-language)
#+TEXT:        Some descriptive text to be inserted at the beginning.
#+TEXT:        Several lines may be given.
#+OPTIONS:     H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t ...
#+BIND:        lisp-var lisp-val, e.g.: org-export-latex-low-levels itemize
               You need to confirm using these, or configure org-export-allow-BIND
#+LINK_UP:     the ``up'' link of an exported page
#+LINK_HOME:   the ``home'' link of an exported page
#+LATEX_HEADER: extra line(s) for the LaTeX header, like \usepackage{xyz}
#+EXPORT_SELECT_TAGS:   Tags that select a tree for export
#+EXPORT_EXCLUDE_TAGS:  Tags that exclude a tree from export
#+XSLT:        the XSLT stylesheet used by DocBook exporter to generate FO file
within your document, but with your actual variable values instead of descriptions. Change any of the variables to the value of your choice. These descriptions are provided here for your reference.

The #+OPTIONS variable is very useful for specific tweaks and will effect both HTML and LaTeX exports.

H:         set the number of headline levels for export
num:       turn on/off section-numbers
toc:       turn on/off table of contents, or set level limit (integer)
\n:        turn on/off line-break-preservation (DOES NOT WORK)
@:         turn on/off quoted HTML tags
::         turn on/off fixed-width sections
|:         turn on/off tables
^:         turn on/off TeX-like syntax for sub- and superscripts.  If
you write "^:{}", a_{b} will be interpreted, but
the simple a_b will be left as it is.
-:         turn on/off conversion of special strings.
f:         turn on/off footnotes like this[1].
todo:      turn on/off inclusion of TODO keywords into exported text
tasks:     turn on/off inclusion of tasks (TODO items), can be nil to remove
all tasks, todo to remove DONE tasks, or list of kwds to keep
pri:       turn on/off priority cookies
tags:      turn on/off inclusion of tags, may also be not-in-toc
<:         turn on/off inclusion of any time/date stamps like DEADLINES
*:         turn on/off emphasized text (bold, italic, underlined)
TeX:       turn on/off simple TeX macros in plain text
LaTeX:     configure export of LaTeX fragments.  Default auto
skip:      turn on/off skipping the text before the first heading
author:    turn on/off inclusion of author name/email into exported file
email:     turn on/off inclusion of author email into exported file
creator:   turn on/off inclusion of creator info into exported file
timestamp: turn on/off inclusion creation time into exported file
d:         turn on/off inclusion of drawers
Variables are set with nil or t, and sometimes take an argument. For example

#+OPTIONS:     H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t ...
Title

The title is taken from the first non-comment line in the file. If there is none, ie your file starts with a heading, it uses the filename. The title can be manually set using

#+TITLE: This is the title of the document
Table of Contents

Normally inserted after the first headline, you can set manually by inserting TABLE-OF-CONTENTS inside square-brackets ([]) seperately on a line.

Some useful options are:

#+OPTIONS: toc:2          (only to two levels in TOC)
#+OPTIONS: toc:nil        (no TOC at all)
Including Other Files

You can include files in an org document, which will be rendered on export. This is done using the single line command

#+INCLUDE: "file-path" [type] [src-language]
type can be either (quote, example, or src). if type is src, then src-language can be any major-mode language.

HTML Export

Stylesheet

You can include a stylesheet by using

#+STYLE:    <link rel="stylesheet" type="text/css" href="../stylesheet.css" />
The styles used by org-mode to export specific parts of your document can be set in your stylesheet with the following variables:

p.author            author information, including email
p.date              publishing date
p.creator           creator info, about org mode version
.title              document title
.todo               TODO keywords, all not-done states
.done               the DONE keywords, all states that count as done
.WAITING            each TODO keyword also uses a class named after itself
.timestamp          timestamp
.timestamp-kwd      keyword associated with a timestamp, like SCHEDULED
.timestamp-wrapper  span around keyword plus timestamp
.tag                tag in a headline
._HOME              each tag uses itself as a class, "@" replaced by "_"
.target             target for links
.linenr             the line number in a code example
.code-highlighted   for highlighting referenced code lines
div.outline-N       div for outline level N (headline plus text))
div.outline-text-N  extra div for text at outline level N
.section-number-N   section number in headlines, different for each level
div.figure          how to format an inlined image
pre.src             formatted source code
pre.example         normal example
p.verse             verse paragraph
div.footnotes       footnote section headline
p.footnote          footnote definition paragraph, containing a footnote
.footref            a footnote reference number (always a <sup>)
.footnum            footnote number in footnote definition (always <sup>)
Site Navigation

You can verily easily add "Up" and "Home" buttons on each page with

#+LINK_UP: 
#+LINK_HOME: index.html
Hyperlinks

Hyperlinks are managed by links and automatically converted to their html counterparts. See Linking Files.

Publishing
Publishing is simply automating your export pipeline. When you have many files that require export, it is a good idea to create a publishing script for this.

Publishing Script

To enable project publishing with org-mode, create a local file in the project directory with the instructions. In our example we have named it org_publish.el.

(defconst home (file-name-directory (or load-file-name buffer-file-name)))

(require 'org-publish)
(setq org-publish-project-alist
      `(
        ;; add all the components here
        ;; *notes* - publishes org files to html
        ("main-page"
         :base-directory ,(concat home "org/")
         :base-extension "org"  ; Filename suffix without dot
         :publishing-directory ,(concat home "html/")
         :recursive t           ; DONT include subdirectories
         :publishing-function org-publish-org-to-html
         :headline-levels 4             ; Just the default for this project.
         :style "<link rel=\"stylesheet\" type=\"text/css\" href=\"../css/stylesheet.css\" />"
         :auto-preamble t
         :auto-sitemap t                ; generate automagically
         :sitemap-sort-folders last
         :sitemap-title "Main Sitemap"
         )

        ;; The meeting notes to be published
        ("meeting-notes"
         :base-directory ,(concat home "org/meeting-notes/")
         :base-extension "org"
         :publishing-directory ,(concat home "html/meeting-notes/")
         :recursive nil
         :publishing-function org-publish-org-to-html
         :headline-levels 4
         :style "<link rel=\"stylesheet\" type=\"text/css\" href=\"../../css/stylesheet.css\" />"
         :auto-preamble t
         :auto-sitemap t
         :sitemap-title "Meeting Notes Directory"
         )

        ;; *static* - copies files to directories
        ("org-static"
         :base-directory ,(concat home "org/")
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory ,(concat home "html/")
         :recursive t
         :publishing-function org-publish-attachment
         )

        ;; *publish* with M-x org-publish-project RET emacsclub RET
        ("emacsclub" :components ("main-page" "meeting-notes" "org-static"))
        ))

** [[http://orgmode.org/manual/Initial-visibility.html][Initial visibility - The Org Manual]] :website:
[2016-08-19 Fri 00:24] 
2.3.2 Initial visibility

When Emacs first visits an Org file, the global state is set to OVERVIEW, i.e., only the top level headlines are visible1. This can be configured through the variable org-startup-folded, or on a per-file basis by adding one of the following lines anywhere in the buffer:

#+BEGIN_EXAMPLE
     #+STARTUP: overview
     #+STARTUP: content
     #+STARTUP: showall
     #+STARTUP: showeverything
#+END_EXAMPLE

The startup visibility options are ignored when the file is open for the first time during the agenda generation: if you want the agenda to honor the startup visibility, set org-agenda-inhibit-startup to nil.

Furthermore, any entries with a ‘VISIBILITY’ property (see Properties and columns) will get their visibility adapted accordingly. Allowed values for this property are folded, children, content, and all.

#+BEGIN_EXAMPLE
C-u C-u <TAB>     (org-set-startup-visibility)
#+END_EXAMPLE

** [[http://orgmode.org/manual/org_002dcrypt_002eel.html][org-crypt.el - The Org Manual]] :website:
 [2016-08-25 Thu 23:19] 15.11 org-crypt.el

 Org-crypt will encrypt the text of an entry, but not the headline, or properties. Org-crypt uses the Emacs EasyPG library to encrypt and decrypt files.

 Any text below a headline that has a ‘:crypt:’ tag will be automatically be encrypted when the file is saved. If you want to use a different tag just customize the org-crypt-tag-matcher setting.

 To use org-crypt it is suggested that you have the following in your .emacs:

#+BEGIN_EXAMPLE
      (require 'org-crypt)
      (org-crypt-use-before-save-magic)
      (setq org-tags-exclude-from-inheritance (quote ("crypt")))
     
      (setq org-crypt-key nil)
	;; GPG key to use for encryption
	;; Either the Key ID or set to nil to use symmetric encryption.
     
      (setq auto-save-default nil)
	;; Auto-saving does not cooperate with org-crypt.el: so you need
	;; to turn it off if you plan to use org-crypt.el quite often.
	;; Otherwise, you'll get an (annoying) message each time you
	;; start Org.
     
	;; To turn it off only locally, you can insert this:
	;;
	;; # -*- buffer-auto-save-file-name: nil; -*-
#+END_EXAMPLE

Excluding the crypt tag from inheritance prevents already encrypted text being encrypted again.
** [[http://orgmode.org/worg/org-hacks.html][Org ad hoc code, quick hacks and workarounds]] :website:
 [2016-08-24 Wed 22:42] Reload Org

 As of Org version 6.23b (released Sunday Feb 22, 2009) there is a new function to reload org files.

 Normally you want to use the compiled files since they are faster. If you update your org files you can easily reload them with

 #+BEGIN_EXAMPLE
 M-x org-reload
 #+END_EXAMPLE

 If you run into a bug and want to generate a useful backtrace you can reload the source files instead of the compiled files with

 #+BEGIN_EXAMPLE
 C-u M-x org-reload
 #+END_EXAMPLE

 and turn on the "Enter Debugger On Error" option. Redo the action that generates the error and cut and paste the resulting backtrace. To switch back to the compiled version just reload again with

 #+BEGIN_EXAMPLE
 M-x org-reload
 #+END_EXAMPLE

** [[https://ogbe.net/blog/blogging_with_org.html][Blogging using org-mode (and nothing else)]] :website:
[2016-08-13 Sat 22:44] Blogging using org-mode (and nothing else)

As you can tell, the look of this website has changed significantly—and it was about time for that. In case you didn't know, this site used to be hosted on http://web.ics.purdue.edu/, which provides free webspace for Purdue students. I used to generate the static HTML pages from plaintext markdown files using the Python-based static site generator Pelican. It worked well for a while, but I ended up having a few issues with that setup:

The host was painstakingly slow to reach from anywhere but the Purdue networks
Pelican would just break sometimes, providing me with nothing but some cryptic Python exception messages
The website did not use TLS and loaded a lot of external content over an unencrypted HTTP connection, causing it to render incompletely when using HTTPS Everywhere
I prefer Org-mode over the fragmented Markdown syntax for writing plaintext documents
Source code blocks are prettier in Org-mode
So, of course, I looked for an alternative.

Since I was predisposed towards using Org-mode for this, Org's publishing feature was the first alternative I investigated. I don't have high demands—all I need is a lightweight, stable, static site generator. I don't need tag clouds, sophisticated pagination, theme support (I'm fine with hacking together my own CSS), or any kind of plugin support; all I really need is a small org-to-HTML converter that can be hacked using Elisp and that I can bolt the extras that I want onto. After browsing around a little bit, I found some neat examples here, here and here. These sites are exactly what I wanted—minimalist, simple, and based on pure Org.

Obviously, the Org publishing feature was all that I needed. I whipped up a nice little configuration that produces this website from a set of Org source files, some custom CSS and HTML, and some custom Elisp. This is what happens at a high level:

All of the blog's files sit in the ~/repos/blog directory and are version controlled using git
The custom Elisp sits in my emacs config. You can find a copy of the relevant sections below.
The source files can be roughly divided into the following categories:
/blog/—Each blog post is contained in an individual Org-file
/pages/—Static Pages, like the landing page, sit in their own directory as Org files
/res/—Contains custom CSS and the MathJax JavaScript
Org's publishing function org-publish uses magic (and some Lisp) to spit out simple, easy to read, and easy to render HTML from these sources (and a few others)
After the HTML files are generated, I'm using rsync to push them onto a Tec-X1 instance from bladetec, which runs nginx on Ubuntu 14.04 and costs a phenomenal €0.99 a month
Here's the obligatory screenshot of me editing this post in Emacs:


There are a few tricks involved in doing this—mostly concerning the generation of the sitemap—, but I will let the relevant section of my config speak for themselves, since they're pretty well commented (I think):

UPDATE <2016-02-02 Tue>:

I've received a few questions asking whether there exists an RSS feed for this blog. There wasn't until today, but I think this will work. I'm using ox-rss.el to generate XML from the blog's sitemap. I had to trick it into doing a few things like generating the correct pubdates and permalinks, but I think it works fine for what I need. The code below is the updated version, with RSS.

The publishing uses the Org HTML export backend a lot, so to start off, we require it here, along with the RSS publishing backend.

#+BEGIN_EXAMPLE
(require 'ox-html)
(require 'ox-rss)
(setq org-export-html-coding-system 'utf-8-unix)
(setq org-html-viewport nil)
#+END_EXAMPLE

Next, we define some functions and variables that will be used by org-publish. First, let's define the website headers, footers, and make sure that the exported HTML points to the right style sheets.

#+BEGIN_EXAMPLE
(setq my-blog-extra-head
      (concat
       "<link rel='stylesheet' href='/../res/code.css' />\n"
       "<link rel='stylesheet' href='/../res/main.css' />"))

(setq my-blog-header-file "~/repos/blog/header.html")
(defun my-blog-header (arg)
  (with-temp-buffer
    (insert-file-contents my-blog-header-file)
    (buffer-string)))

(setq my-blog-footer
      "<hr />\n
<p><span style=\"float: left;\"><a href= \"/blog.xml\">RSS</a></span>
License: <a href= \"https://creativecommons.org/licenses/by-sa/4.0/\">CC BY-SA 4.0</a></p>\n
<p><a href= \"/contact.html\"> Contact</a></p>\n")
#+END_EXAMPLE

I'd also like to export drawers out to HTML; this idea is ripped directly from here.

#+BEGIN_EXAMPLE
(defun my-blog-org-export-format-drawer (name content)
  (concat "<div class=\"drawer " (downcase name) "\">\n"
    "<h6>" (capitalize name) "</h6>\n"
    content
    "\n</div>"))
#+END_EXAMPLE

MathJax usually recommends to use their CDN to load their JavaScript code, but I want to use a version that sits on my server.

#+BEGIN_EXAMPLE
(setq my-blog-local-mathjax
      '((path "/res/mj/MathJax.js?config=TeX-AMS-MML_HTMLorMML")
        (scale "100") (align "center") (indent "2em") (tagside "right")
        (mathml nil)))
#+END_EXAMPLE

Now we'll get to some of the customizations I've bolted on Org's publishing features. In it's standard configuration, the sitemap generator produces a plain, kind of boring looking list of posts, which was inadequate for me. After hacking on the sitemap generation function for a little while, I came up with the following solution: When I write a blog post, I enclose the "preview" part of the post in #+BEGIN_PREVIEW...#+END_PREVIEW tags, which my (very simple) parser then inserts into the sitemap page.

#+BEGIN_EXAMPLE
(defun my-blog-get-preview (file)
  "The comments in FILE have to be on their own lines, prefereably before and after paragraphs."
  (with-temp-buffer
    (insert-file-contents file)
    (goto-char (point-min))
    (let ((beg (+ 1 (re-search-forward "^#\\+BEGIN_PREVIEW$")))
          (end (progn (re-search-forward "^#\\+END_PREVIEW$")
                      (match-beginning 0))))
      (buffer-substring beg end))))

(defun my-blog-sitemap (project &optional sitemap-filename)
  "Generate the sitemap for my blog."
  (let* ((project-plist (cdr project))
         (dir (file-name-as-directory
               (plist-get project-plist :base-directory)))
         (localdir (file-name-directory dir))
         (exclude-regexp (plist-get project-plist :exclude))
         (files (nreverse
                 (org-publish-get-base-files project exclude-regexp)))
         (sitemap-filename (concat dir (or sitemap-filename "sitemap.org")))
         (sitemap-sans-extension
          (plist-get project-plist :sitemap-sans-extension))
         (visiting (find-buffer-visiting sitemap-filename))
         file sitemap-buffer)
    (with-current-buffer
        (let ((org-inhibit-startup t))
          (setq sitemap-buffer
                (or visiting (find-file sitemap-filename))))
      (erase-buffer)
      ;; loop through all of the files in the project
      (while (setq file (pop files))
        (let ((fn (file-name-nondirectory file))
              (link ;; changed this to fix links. see postprocessor.
               (file-relative-name file (file-name-as-directory
                                         (expand-file-name (concat (file-name-as-directory dir) "..")))))
              (oldlocal localdir))
          (when sitemap-sans-extension
            (setq link (file-name-sans-extension link)))
          ;; sitemap shouldn't list itself
          (unless (equal (file-truename sitemap-filename)
                         (file-truename file))
            (let (;; get the title and date of the current file
                  (title (org-publish-format-file-entry "%t" file project-plist))
                  (date (org-publish-format-file-entry "%d" file project-plist))
                  ;; get the preview section from the current file
                  (preview (my-blog-get-preview file))
                  (regexp "\\(.*\\)\\[\\([^][]+\\)\\]\\(.*\\)"))
              ;; insert a horizontal line before every post, kill the first one
              ;; before saving
              (insert "-----\n")
              (cond ((string-match-p regexp title)
                     (string-match regexp title)
                     ;; insert every post as headline
                     (insert (concat"* " (match-string 1 title)
                                    "[[file:" link "]["
                                    (match-string 2 title)
                                    "]]" (match-string 3 title) "\n")))
                    (t (insert (concat "* [[file:" link "][" title "]]\n"))))
              ;; add properties for `ox-rss.el' here
              (let ((rss-permalink (concat (file-name-sans-extension link) ".html"))
                    (rss-pubdate (format-time-string
                                  (car org-time-stamp-formats)
                                  (org-publish-find-date file))))
                (org-set-property "RSS_PERMALINK" rss-permalink)
                (org-set-property "PUBDATE" rss-pubdate))
              ;; insert the date, preview, & read more link
              (insert (concat date "\n\n"))
              (insert preview)
              (insert (concat "[[file:" link "][Read More...]]\n"))))))
      ;; kill the first hrule to make this look OK
      (goto-char (point-min))
      (let ((kill-whole-line t)) (kill-line))
      (save-buffer))
    (or visiting (kill-buffer sitemap-buffer))))
#+END_EXAMPLE

Next I define some pre-and postprocessors that run during the publishing process. They are used to move around some files before and after publishing.

#+BEGIN_EXAMPLE
(setq my-blog-emacs-config-name "emacsconfig.org")
(setq my-blog-process-emacs-config nil)

(defun my-blog-pages-preprocessor ()
  "Move a fresh version of the settings.org file to the pages directory."
  (when my-blog-process-emacs-config
    (let* ((cfg-file (expand-file-name (concat (file-name-as-directory user-emacs-directory)
                                               "settings.org")))
           (destdir (file-name-as-directory (plist-get project-plist :base-directory)))
           (cfg-file-dest (expand-file-name (concat destdir my-blog-emacs-config-name))))
      (copy-file cfg-file cfg-file-dest t))))

(defun my-blog-pages-postprocessor ()
  (message "In the pages postprocessor."))

(defun my-blog-articles-preprocessor ()
  (message "In the articles preprocessor."))

(defun my-blog-articles-postprocessor ()
  "Massage the sitemap file and move it up one directory.

for this to work, we have already fixed the creation of the
relative link in the sitemap-publish function"
  (let* ((sitemap-fn (concat (file-name-sans-extension (plist-get project-plist :sitemap-filename)) ".html"))
         (sitemap-olddir (plist-get project-plist :publishing-directory))
         (sitemap-newdir (expand-file-name (concat (file-name-as-directory sitemap-olddir) "..")))
         (sitemap-oldfile (expand-file-name sitemap-fn sitemap-olddir))
         (sitemap-newfile (expand-file-name (concat (file-name-as-directory sitemap-newdir) sitemap-fn))))
    (with-temp-buffer
      (goto-char (point-min))
      (insert-file-contents sitemap-oldfile)
      ;; massage the sitemap if wanted

      ;; delete the old file and write the correct one
      (delete-file sitemap-oldfile)
      (write-file sitemap-newfile))))
The next preprocessor runs CSSTidy on the site's CSS.

(defun my-blog-minify-css ()
  (let* ((csstidy "csstidy")
         (csstidy-args " --template=highest --silent=true")
         (css-dir (expand-file-name (plist-get project-plist :publishing-directory)))
         (css-files (directory-files css-dir t "^.*\\.css$")))
    (dolist (file css-files)
      (with-temp-buffer
        (insert (shell-command-to-string (concat csstidy " " file csstidy-args)))
        (write-file file)))))
Most of the publishing settings are defined in org-publish-project-alist.

(setq org-publish-project-alist
      `(("blog"
         :components ("blog-articles", "blog-pages", "blog-rss", "blog-res", "blog-images", "blog-dl"))
        ("blog-articles"
         :base-directory "~/repos/blog/blog/"
         :base-extension "org"
         :publishing-directory "~/repos/blog/www/blog/"
         :publishing-function org-html-publish-to-html
         :preparation-function my-blog-articles-preprocessor
         :completion-function my-blog-articles-postprocessor
         :htmlized-source t ;; this enables htmlize, which means that I can use css for code!

         :with-author t
         :with-creator nil
         :with-date t

         :headline-level 4
         :section-numbers nil
         :with-toc nil
         :with-drawers t
         :with-sub-superscript nil ;; important!!

         ;; the following removes extra headers from HTML output -- important!
         :html-link-home "/"
         :html-head nil ;; cleans up anything that would have been in there.
         :html-head-extra ,my-blog-extra-head
         :html-head-include-default-style nil
         :html-head-include-scripts nil
         :html-viewport nil

         :html-format-drawer-function my-blog-org-export-format-drawer
         :html-home/up-format ""
         :html-mathjax-options ,my-blog-local-mathjax
         :html-mathjax-template "<script type=\"text/javascript\" src=\"%PATH\"></script>"
         :html-footnotes-section "<div id='footnotes'><!--%s-->%s</div>"
         :html-link-up ""
         :html-link-home ""
         :html-preamble my-blog-header
         :html-postamble ,my-blog-footer
	 
         ;; sitemap - list of blog articles
         :auto-sitemap t
         :sitemap-filename "blog.org"
         :sitemap-title "Blog"
         ;; custom sitemap generator function
         :sitemap-function my-blog-sitemap
         :sitemap-sort-files anti-chronologically
         :sitemap-date-format "Published: %a %b %d %Y")
        ("blog-pages"
         :base-directory "~/repos/blog/pages/"
         :base-extension "org"
         :publishing-directory "~/repos/blog/www/"
         :publishing-function org-html-publish-to-html
         :preparation-function my-blog-pages-preprocessor
         :completion-function my-blog-pages-postprocessor
         :htmlized-source t

         :with-author t
         :with-creator nil
         :with-date t

         :headline-level 4
         :section-numbers nil
         :with-toc nil
         :with-drawers t
         :with-sub-superscript nil ;; important!!
         :html-viewport nil ;; hasn't worked yet

         ;; the following removes extra headers from HTML output -- important!
         :html-link-home "/"
         :html-head nil ;; cleans up anything that would have been in there.
         :html-head-extra ,my-blog-extra-head
         :html-head-include-default-style nil
         :html-head-include-scripts nil

         :html-format-drawer-function my-blog-org-export-format-drawer
         :html-home/up-format ""
         :html-mathjax-options ,my-blog-local-mathjax
         :html-mathjax-template "<script type=\"text/javascript\" src=\"%PATH\"></script>"
         :html-footnotes-section "<div id='footnotes'><!--%s-->%s</div>"
         :html-link-up ""
         :html-link-home ""

         :html-preamble my-blog-header
         :html-postamble ,my-blog-footer)
        ("blog-rss"
         :base-directory "~/repos/blog/blog/"
         :base-extension "org"
         :publishing-directory "~/repos/blog/www/"
         :publishing-function org-rss-publish-to-rss

         :html-link-home "https://ogbe.net/"
         :html-link-use-abs-url t

         :title "Dennis Ogbe"
         :rss-image-url "https://ogbe.loc/img/feed-icon-28x28.png"
         :section-numbers nil
         :exclude ".*"
         :include ("blog.org")
         :table-of-contents nil)
        ("blog-res"
         :base-directory "~/repos/blog/res/"
         :base-extension ".*"
         :publishing-directory "~/repos/blog/www/res/"
         :publishing-function org-publish-attachment
         :completion-function my-blog-minify-css)
        ("blog-images"
         :base-directory "~/repos/blog/img/"
         :base-extension ".*"
         :publishing-directory "~/repos/blog/www/img/"
         :publishing-function org-publish-attachment
         :recursive t)
        ("blog-dl"
         :base-directory "~/repos/blog/dl/"
         :base-extension ".*"
         :publishing-directory "~/repos/blog/www/dl/"
         :publishing-function org-publish-attachment
         :Recursive t)))
#+END_EXAMPLE

Finally, define a small template for new blog posts.

#+BEGIN_EXAMPLE
(add-to-list 'org-structure-template-alist
             '("b" "#+TITLE: ?
#+END_EXAMPLE

** [[https://github.com/yjwen/org-reveal/issues/148][Export error is back · Issue #148 · yjwen/org-reveal · GitHub]] :website:
 [2016-08-24 Wed 21:57] I found this workaround solution: http://emacs.stackexchange.com/a/16616/2780
 Actually only doing C-u M-x org-reload was enough in my case. But I need to run it every time I restarted emacs (fortunately that is not often).

** [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-dot.html][Dot Source Code Blocks in Org Mode]] :website:
 [2016-08-29 Mon 17:51] You can configure Org mode to execute dot source code blocks by adding a line to org-babel-load-languages:

 (org-babel-do-load-languages
  'org-babel-load-languages
  '((dot . t))) ; this line activates dot

** [[http://orgmode.org/manual/Handling-links.html][Handling links - The Org Manual]] :website:
 [2016-08-29 Mon 21:32] C-c C-x C-v     (org-toggle-inline-images)
 Toggle the inline display of linked images. Normally this will only inline images that have no description part in the link, i.e., images that will also be inlined during export. When called with a prefix argument, also display images that do have a link description. You can ask for inline images to be displayed at startup by configuring the variable org-startup-with-inline-images7.
** [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired-Updating.html][GNU Emacs Manual: Dired Updating]] :website:
 [2016-08-30 Tue 00:19] 30.15 Updating the Dired Buffer

 This section describes commands to update the Dired buffer to reflect outside (non-Dired) changes in the directories and files, and to delete part of the Dired buffer.

 g
 Update the entire contents of the Dired buffer (revert-buffer).

 l
 Update the specified files (dired-do-redisplay). You specify the files for l in the same way as for file operations.

 k
 Delete the specified file lines—not the files, just the lines (dired-do-kill-lines).

 s
 Toggle between alphabetical order and date/time order (dired-sort-toggle-or-edit).

 C-u s switches RET
 Refresh the Dired buffer using switches as dired-listing-switches.

 Type g (revert-buffer) to update the contents of the Dired buffer, based on changes in the files and directories listed. This preserves all marks except for those on files that have vanished. Hidden subdirectories are updated but remain hidden.

 To update only some of the files, type l (dired-do-redisplay). Like the Dired file-operating commands, this command operates on the next n files (or previous -n files), or on the marked files if any, or on the current file. Updating the files means reading their current status, then updating their lines in the buffer to indicate that status.

 If you use l on a subdirectory header line, it updates the contents of the corresponding subdirectory.

 If you use C-x d or some other Dired command to visit a directory that is already being shown in a Dired buffer, Dired switches to that buffer but does not update it. If the buffer is not up-to-date, Dired displays a warning telling you to type g to update it. You can also tell Emacs to revert each Dired buffer automatically when you revisit it, by setting the variable dired-auto-revert-buffer to a non-nil value.

 To delete file lines from the buffer—without actually deleting the files—type k (dired-do-kill-lines). Like the file-operating commands, this command operates on the next n files, or on the marked files if any. However, it does not operate on the current file, since otherwise mistyping k could be annoying.

 If you use k to kill the line for a directory file which you had inserted in the Dired buffer as a subdirectory (see Subdirectories in Dired), it removes the subdirectory listing as well. Typing C-u k on the header line for a subdirectory also removes the subdirectory line from the Dired buffer.

 The g command brings back any individual lines that you have killed in this way, but not subdirectories—you must use i to reinsert a subdirectory.

 The files in a Dired buffers are normally listed in alphabetical order by file names. Alternatively Dired can sort them by date/time. The Dired command s (dired-sort-toggle-or-edit) switches between these two sorting modes. The mode line in a Dired buffer indicates which way it is currently sorted—by name, or by date.

 C-u s switches RET lets you specify a new value for dired-listing-switches.
** [[http://jekyll.tips/jekyll-casts/install-jekyll-on-os-x/][Install Jekyll on Mac OS X - Jekyll Tips]] :website:
 [2016-09-03 Sat 19:38] In this installation guide we’ll be using Mac OS X 10.11 El Capitan. These instructions should work for older versions of OS X but they have not but tested.

 Install Xcode from the AppStore, this around a 4GB download.



 We’ll open up the Terminal which can be found at Applications/Utilities/Terminal. In the Terminal we can run the rest of our installation commands.



 We need to install “Command Line Tools” which gives us access to commonly used tools, utilities, and compilers such as make and GCC.

 xcode-select --install
 

 After that we need to agree to Xcode’s license. Either run the command below or open up Xcode which will prompt you to agree to the license.

 sudo xcodebuild -license
 OS X already has Ruby already installed but it has some quirks that makes installing Jekyll tricky. Instead of using this version, we’ll install our own version of Ruby.

 First we’ll install Homebrew. Homebrew helps you install packages and is a must-have for anyone programming on OS X.

 /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
 Now we can install Ruby.

 brew install ruby
 And now we can install Jekyll.

 sudo gem install jekyll
 We can test Jekyll is working by checking the version installed.

 jekyll -v
* Linux
** [[http://steve-parker.org/articles/luks/][Articles - Linux Encrypted Filesystems with LUKS { steve-parker.org }]] :website:
[2016-08-15 Mon 00:08] 

#+BEGIN_EXAMPLE
#!/bin/sh

case $1 in
  start)
        cryptsetup luksOpen /dev/sda8 crypto
        echo "Mounting /crytpo..."
        mount /dev/mapper/crypto /crypto
        ;;
  stop)
        echo "Unmounting /crytpo..."
        umount /crypto
        cryptsetup luksClose crypto
        ;;
  *)
        echo "Usage: crypt [ start | stop ]"
        ;;
esac
#+END_EXAMPLE

** [[http://www.howtogeek.com/267376/how-to-automatically-correct-spelling-and-typos-when-using-cd-on-linux/][How to Automatically Correct Spelling and Typos When Using “cd” on Linux]] :website:
[2016-08-20 Sat 16:33] Scroll to the bottom of the .bashrc file and add the following line to the end of the file.

#+BEGIN_EXAMPLE
shopt -s cdspell
#+END_EXAMPLE

** [[http://man.cx/zathura(1)][Manpage for zathura - man.cx manual pages]] :website:
[2016-08-20 Sat 20:06] NAME

zathura − a PDF viewer

SYNOPSIS

zathura [-e xid] [-c path] [file] [password]

DESCRIPTION

zathura is a highly customizable and functional PDF viewer based on the poppler rendering library and the gtk+ toolkit. zathura provides a minimalistic and space saving interface, with a focus on keyboard interaction.

OPTIONS

-e xid

Reparents to window specified by xid. -c path Path to the config directory

DEFAULT SETTINGS

Shortcuts

J

Go to next page

K

Go to previous page

h

Scroll to the left

k

Scroll upwards

j

Scroll downwards

^f

Scroll page down

^b

Scroll page up

^d

Scroll half a page down

^u

Scroll half a page up

l

Scroll to the right

/

Search forwards

?

Search backwards

n

Search last keyword forwards

N

Search last keyword backwards

Tab

Toggle index

o

Open a file

a

Zoom to fit

s

Zoom to width

f

Follow a link on the page

m

Mark current position and save it in register specified by a character

’

Go to saved position specified by the ensuing character

r

Rotate the page

R

Reload the document

O

Change goto mode (L: search labels, D: default, O: manual offset)

^i

Invert the colors of the page

i

Change to insert mode

v

Change to visual mode

:

Focus inputbar

Backspace

Delete last character in the buffer

F5

Toggle fullscreen mode

^n

Toggle statusbar visibility

^m

Toggle inputbar visibility

Esc | ^c

Abort

^q

Quit the program

Index commands

k

Navigate to one element above the current position

j

Navigate to one element below the current position

h

Collapse current element

l

Expand current element

Space | Return

Select current element

Buffered commands

gg

Go to the first page

GG

Go to the last page

[0-9]+G

Go to the specified page

zI

Zoom in

zO

Zoom out

z0

Zoom to the original size

[0-9]+Z

Zoom to the given level

[0-9]+%

Move to the given position

Commands

blist

List and open bookmark

bmark

Bookmark current page

close

Close current file

coffset

Set page offset

delbmark

Delete given bookmark

export

Export images or attached files

info

Show information about the document

map

Map shortcut functions (map <key> <function> <argument> <mode>)

open

Open a file

print

Print the document

quit

Quit the program

rotate

Rotate the page

set

Set an option (set <id> <value>)

write

Save the document

Inputbar shortcuts

Up

Move up in the command history

Down

Move down in the command history

Tab | Shift + Tab

Tab completion

^w

Delete last word

CONFIGURATION

The complete configuration including the appearance and shortcuts of the program are defined in a separate file named config.h. In this file you are able to change and adjust all the settings of zathura according to your wishes.

In addition you can create a zathurarc file (default path: ~/.config/zathura/zathurarc) to overwrite settings and keybindings by using the set and map function. For more information please check the faq on the website: http://pwmt.org/projects/zathura
** [[https://librevault.com/][Librevault]] :website:
[2016-08-22 Mon 20:29] File synchronization designed with privacy in mind
* Mac
** [[https://stackoverflow.com/questions/28063598/error-while-executing-plist-file-path-had-bad-ownership-permissions][terminal - Error while executing .plist file Path had bad ownership/permissions - Stack Overflow]] :website:
 [2016-09-08 Thu 21:29] Try changing to ownership of the .plist file, as noted here.

 sudo chown root /Library/LaunchDaemons/myfile.plist
 sudo chgrp wheel /Library/LaunchDaemons/myfile.plist
 It is also worth noting that these root LaunchDaemons can't be world writable, for security reasons:

 sudo chmod o-w /Library/LaunchDaemons/*

** [[https://weechat.org/files/doc/weechat_faq.en.html][WeeChat FAQ (Frequently Asked Questions)]] :website:
 [2016-09-12 Mon 00:38] How can I install WeeChat on OS X?
 It is recommended to use Homebrew, you can get help with:

 brew info weechat
 You can install WeeChat with this command:

 brew install weechat --with-aspell --with-curl --with-python --with-perl --with-ruby --with-lua --with-guile
