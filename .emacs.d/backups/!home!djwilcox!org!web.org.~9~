* Web

** [[https://www.emacswiki.org/emacs/EmacsAsDaemon][EmacsWiki: Emacs As Daemon]] :website:
[2016-08-07 Sun 15:55] Emacs as Daemon on OS X using Launchd

If you’re running Emacs 23, you can run Emacs As Daemon via OS X’s launchd. The easiest solution is to use a tool like Lingon to create the plist file or can create one manually like this:

    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" 
        "http://www.apple.com/DTDs/PropertyList-1.0.dtd"> 
     <plist version="1.0">
      <dict> 
        <key>Label</key>
        <string>gnu.emacs.daemon</string>
        <key>ProgramArguments</key>
        <array>
          <string>/Applications/Emacs.app/Contents/MacOS/Emacs</string>
          <string>--daemon</string>
        </array>
       <key>RunAtLoad</key>
       <true/>
       <key>ServiceDescription</key>
       <string>Gnu Emacs Daemon</string>
       <key>UserName</key>
       <string>[YOUR USERNAME HERE]</string>
      </dict>
    </plist>
This can then be installed in /Library/LaunchAgents and loaded via:

    sudo launchctl load -w /Library/LaunchAgents/gnu.emacs.daemon.plist

** [[https://github.com/ralesi/ranger.el][GitHub - ralesi/ranger.el: Bringing the goodness of ranger to dired!]] :website:
[2016-08-10 Wed 00:41] Ranger

 

Table of Contents

Ranger
Description
Installation
Screenshot
Screencast
Features
Todo
Window conventions for Ranger
Standard Ranger Bindings
Coming from dired
Minimal Ranger Mode (deer)
Setting as Default Directory Handler
Bookmark Navigation
Tab and History Usage
Copy and Paste Functionality
Selected File Actions
File Sorting and Listing
Troubleshooting and Package Workarounds
helm-descbinds
Configuration
Buffer Management
Directory Listing
Window Decoration and Appearance
Delays
Parent Window Options
Preview Window Options
Description

This is a minor mode that runs within dired emulating many of the features of ranger. This minor mode shows a stack of the parent directories and updates the parent buffers while navigating the file system. The preview window takes some of the ideas from Peep-Dired to display previews for selected files in the primary dired buffer.

Installation

Once you have setup Melpa you can use package-install command to install Ranger. The package name is ranger.

Screenshot

ranger mode active 

ranger mode showing image 

Screencast

ranger screencast 

Features

Preview of selected file / directory
Multi-column display of parent directories
History log and prompt to navigate through history
Toggle between literal file viewing and actual
Indirectly scroll through previewed files
Show images inline in preview window
Fit images to window when previewing (requires image-dired)
Quick and persistent sorting across folders
Quick access to shell
Mouse support
Emacs bookmarks support
Create bindings to go up / down the next directory
Minimal ranger mode (deer-mode)
Copy / paste functionality
Persistent flags showing recently copied items
Todo

Preview PDF and document viewing
Improved navigation within archive files
Set up tabs and navigation between
Work with flattened subdirs and tree
Window conventions for Ranger

ranger mode with preview enabled 

Ranger has the ability to show the parent directories for the current working directory and also a preview for the currently selected file.

In this package, the parent windows denote any window to the left of the active ranger window. These represent the immediate parent directory of the current directory and any parents of that if ranger-parent-depth is greater than 1. If navigating the root directory, the parent window will disappear. The parent window is not expected to be interacted with; however, [ and ] will navigate up and down the parent directories, also <Mouse-1> can be used to quickly navigate to a file / folder in the parent window.

The active window is designated as the ranger or primary window. Most file activities are performed here. h and l will navigate up to the parent directory and open the selected file or directory. Opening a file in ranger is designed to close the ranger interface and revert the window configuration to its previous state.

The window on the right side is designated as the preview window. The visibility of the preview window can be toggled with the ranger-preview-file setting and the keybinding i. Files will be previewed in the preview window when selected. A raw preview of the file is set by default with the ranger-show-literal setting, but can be toggled by zi, at which case a fully formatted preview of the file will be shown. Additionally, when ranger-show-literal is disabled, images and archive contents will be shown in the preview window when selected. When a directory is selected in the ranger window, a file listing of the subdirectory will be shown.

Standard Ranger Bindings

Keybinding      Description
?       show ranger help
j       navigate down
k       navigate up
h       go up directory
l       find file / enter directory
f       search for file names
i       show preview of current file
RET     find file / enter directory
C-r     refresh
^R      revert buffer
q       quit
gg      goto first file
G       goto last file
gh      goto home directory
C-SPC/TAB       mark current file
v       toggle all marks
V       visually select lines
u       unmark the selected file
D       delete the selected file
R       rename/move the selected file
o       show sort dialog
zi      toggle showing literal / full-text previews
zh      toggle showing dotfiles
zf      toggle showing image full-size or fitted to window
z-      reduce number of parents
z+      increment number of parents
zp      toggle between full ranger and deer-mode
zd      toggle showing file details in deer-mode
S       eshell popup window
!       run shell command on file
&       run async shell command on file
[       previous parent directory
]       next parent directory
J       next subdir
K       previous subdir
C-j     scroll preview window down
C-k     scroll preview window up
Coming from dired

Ranger works as a replacement to dired, but there are a couple of things you have to know:

If you don't like seen windows with the parent folders, you can user the minimal ranger mode called deer (see next section).
When you open a file, the ranger session gets finalized. If you want to restore it after closing the file, just try opening ranger again (it will remember exactly the path where you were before).
Minimal Ranger Mode (deer)

Termed as deer-mode, based on the zsh module developed by Vifon, we can use ranger in a single window without preview or parent directories. This allows all the functionality built-in to ranger without modifying any other buffer windows. Toggle between ranger and deer with zp.

deer mode (minimal ranger mode) 

Setting as Default Directory Handler

Ranger has the ability to be used as the default directory handler when Emacs identifies a directory is opened. To make deer the default handler, set ranger-override-dired and restart.

(setq ranger-override-dired t)
Bookmark Navigation

Ranger makes use of the built-in bookmark functionality in Emacs by creating bookmarks with the name ranger-? where ? can be any single key. This allows fast navigation to predefined directories that are persistent across sessions. A new mark can be set with m and can be accessed with the tilde key. A prompt of all directory bookmarks can be accessed with B.

Keybinding      Description
```     goto bookmark
m       set bookmark
B       show bookmark prompt
Tab and History Usage

Ranger offers tabs to allow quick navigation between temporary working directories. These do not persist across sessions, but are useful when navigating the file system to multiple paths. In addition to tabs, the file navigation history of the current ranger session is saved to allow traversal to recently accessed directories. By default, ranger shows the number and the file name of the buffer as a tab. This can be adjusted by modifying the ranger-tabs-style variable.

Keybinding      Description
gn      create a new tab
gT      go to previous tab
gt      go to next tab
gc      close current tab
zz      search through history
H       history back
L       history next
Copy and Paste Functionality

Ranger utilizes a copy ring to save a persistent fileset that can then be either moved or copied to a target directory. This is consistent with the way the ranger file manager manages file movement. yy specifies to copy the marked or currently hovered files. Additionally a flag denoted as "P" will visually indicate what files are marked for movement. dd likewise specifies that the files will be moved instead of copied.

Using the universal prefix <C-u> prior to this binding will update the selected files to the current copy register. To check the files in the current copy ring, press p?.

To paste the files most recently added to the copy ring, use pp or po to paste. The latter binding will overwrite existing files.

Keybinding      Description
yy      mark files to copy
dd      mark files to move
pp      paste files in copy ring
po      paste files in copy ring and overwrite existing
p?      show the copy contents
Selected File Actions

There are additional features to allow one to open a file or directory while maintaining the previously selected window before ranger is initiated. These keys will open the current file or all the marked files as described below. In the case of running this in deer, the deer window will not close and a new split / frame will be added as described. This allows the creation of an additional deer window if the currently selected file is also a directory for dual pane usage.

Keybinding      Description
ws      exit ranger and open selected file in vertical split
wv      exit ranger and open selected file in horizontal split
wf      exit ranger and open selected file in new frame
we      open the selected file in external app
File Sorting and Listing

Ranger uses dired's default sorting mechanism, but also adds some additional functionality. The default listing switches supplied to dired can be adjusted using the ranger-listing-switches parameter. Once set, all ranger windows will show these parameters.

Additionally, the dired buffer is modified to sort directories to the top. If this is not the desired functionality, the user can change ranger-listing-dir-first.

The o key provides sorting options for the current buffer. In cases when the variable ranger-persistent-sort is set, this sorting method is used for all other ranger buffers.

Troubleshooting and Package Workarounds

Ranger.el needs to control all window placement when open to ensure the parent / primary / preview windows are placed properly and updated upon file movement. As such, there are some known issues with certain packages when they attempt to control window placement while ranger is initialized.

helm-descbinds

This package defaults to opening a helm window with all available bindings in one-window. This causes conflicts with ranger, but there is a workaround.

(setq helm-descbinds-window-style 'same-window)
Configuration

Most parameters can be toggled on and off and stay within the current emacs session. Any settings that are desired on startup should be set below.

Buffer Management

When disabling the mode you can choose to kill the buffers that were opened while browsing the directories.

(setq ranger-cleanup-on-disable t)
Or you can choose to kill the buffer just after you move to another entry in the dired buffer.

(setq ranger-cleanup-eagerly t)
Directory Listing

You can choose to show dotfiles at ranger startup, toggled by zh.

(setq ranger-show-dotfiles t)
Window Decoration and Appearance

Ranger by default modifies the header-line in dired to make a more consistent appearance to the real ranger. Setting to nil will disable this feature.

(setq ranger-modify-header t)
Define custom function used to output header of primary ranger window. Must return a string that is placed in the header-line.

(setq ranger-header-func 'ranger-header-line)
Define custom function used to output header of parent and preview windows. Must return a string that is placed in the header-line.

(setq ranger-parent-header-func 'ranger-parent-header-line)
(setq ranger-preview-header-func 'ranger-preview-header-line)
The cursor can also be hidden for a seamless user experience showing just the cursor line. This feature can be disabled in the cases for themes that do not have a visible cursor line

(setq ranger-hide-cursor nil)
Delays

Certain window display options are defined with a delay for a better user experience. The below options can be customized to adjust time to display the preview and the footer information.

(setq ranger-footer-delay 0.2)
(setq ranger-preview-delay 0.040)
Parent Window Options

You can set the number of folders to nest to the left, adjusted by z- and z+.

(setq ranger-parent-depth 2)
You can set the size of the parent windows as a fraction of the frame size.

(setq ranger-width-parents 0.12)
When increasing number of nested parent folders, set max width as fraction of frame size to prevent filling up entire frame with parents.

(setq ranger-max-parent-width 0.12)
Preview Window Options

Set the default preference to preview selected file.

(setq ranger-preview-file t)
You can choose to show previews literally, or through find-file, toggled by zi.

(setq ranger-show-literal t)
You can set the size of the preview windows as a fraction of the frame size.

(setq ranger-width-preview 0.55)
You probably don't want to open certain files like videos when previewing. To ignore certain files when moving over them you can customize the following to your liking:

(setq ranger-excluded-extensions '("mkv" "iso" "mp4"))
To set the max files size (in MB), set the following parameter:

(setq ranger-max-preview-size 10)
The preview function is also able to determine if the file selected is a binary file. If set to t, these files will not be previewed.

(setq ranger-dont-show-binary t)

** [[https://ogbe.net/blog/blogging_with_org.html][Blogging using org-mode (and nothing else)]] :website:
[2016-08-13 Sat 22:44] Blogging using org-mode (and nothing else)

As you can tell, the look of this website has changed significantly—and it was about time for that. In case you didn't know, this site used to be hosted on http://web.ics.purdue.edu/, which provides free webspace for Purdue students. I used to generate the static HTML pages from plaintext markdown files using the Python-based static site generator Pelican. It worked well for a while, but I ended up having a few issues with that setup:

The host was painstakingly slow to reach from anywhere but the Purdue networks
Pelican would just break sometimes, providing me with nothing but some cryptic Python exception messages
The website did not use TLS and loaded a lot of external content over an unencrypted HTTP connection, causing it to render incompletely when using HTTPS Everywhere
I prefer Org-mode over the fragmented Markdown syntax for writing plaintext documents
Source code blocks are prettier in Org-mode
So, of course, I looked for an alternative.

Since I was predisposed towards using Org-mode for this, Org's publishing feature was the first alternative I investigated. I don't have high demands—all I need is a lightweight, stable, static site generator. I don't need tag clouds, sophisticated pagination, theme support (I'm fine with hacking together my own CSS), or any kind of plugin support; all I really need is a small org-to-HTML converter that can be hacked using Elisp and that I can bolt the extras that I want onto. After browsing around a little bit, I found some neat examples here, here and here. These sites are exactly what I wanted—minimalist, simple, and based on pure Org.

Obviously, the Org publishing feature was all that I needed. I whipped up a nice little configuration that produces this website from a set of Org source files, some custom CSS and HTML, and some custom Elisp. This is what happens at a high level:

All of the blog's files sit in the ~/repos/blog directory and are version controlled using git
The custom Elisp sits in my emacs config. You can find a copy of the relevant sections below.
The source files can be roughly divided into the following categories:
/blog/—Each blog post is contained in an individual Org-file
/pages/—Static Pages, like the landing page, sit in their own directory as Org files
/res/—Contains custom CSS and the MathJax JavaScript
Org's publishing function org-publish uses magic (and some Lisp) to spit out simple, easy to read, and easy to render HTML from these sources (and a few others)
After the HTML files are generated, I'm using rsync to push them onto a Tec-X1 instance from bladetec, which runs nginx on Ubuntu 14.04 and costs a phenomenal €0.99 a month
Here's the obligatory screenshot of me editing this post in Emacs:


There are a few tricks involved in doing this—mostly concerning the generation of the sitemap—, but I will let the relevant section of my config speak for themselves, since they're pretty well commented (I think):

UPDATE <2016-02-02 Tue>:

I've received a few questions asking whether there exists an RSS feed for this blog. There wasn't until today, but I think this will work. I'm using ox-rss.el to generate XML from the blog's sitemap. I had to trick it into doing a few things like generating the correct pubdates and permalinks, but I think it works fine for what I need. The code below is the updated version, with RSS.

The publishing uses the Org HTML export backend a lot, so to start off, we require it here, along with the RSS publishing backend.

(require 'ox-html)
(require 'ox-rss)
(setq org-export-html-coding-system 'utf-8-unix)
(setq org-html-viewport nil)
Next, we define some functions and variables that will be used by org-publish. First, let's define the website headers, footers, and make sure that the exported HTML points to the right style sheets.

(setq my-blog-extra-head
      (concat
       "<link rel='stylesheet' href='/../res/code.css' />\n"
       "<link rel='stylesheet' href='/../res/main.css' />"))

(setq my-blog-header-file "~/repos/blog/header.html")
(defun my-blog-header (arg)
  (with-temp-buffer
    (insert-file-contents my-blog-header-file)
    (buffer-string)))

(setq my-blog-footer
      "<hr />\n
<p><span style=\"float: left;\"><a href= \"/blog.xml\">RSS</a></span>
License: <a href= \"https://creativecommons.org/licenses/by-sa/4.0/\">CC BY-SA 4.0</a></p>\n
<p><a href= \"/contact.html\"> Contact</a></p>\n")
I'd also like to export drawers out to HTML; this idea is ripped directly from here.

(defun my-blog-org-export-format-drawer (name content)
  (concat "<div class=\"drawer " (downcase name) "\">\n"
    "<h6>" (capitalize name) "</h6>\n"
    content
    "\n</div>"))
MathJax usually recommends to use their CDN to load their JavaScript code, but I want to use a version that sits on my server.

(setq my-blog-local-mathjax
      '((path "/res/mj/MathJax.js?config=TeX-AMS-MML_HTMLorMML")
        (scale "100") (align "center") (indent "2em") (tagside "right")
        (mathml nil)))
Now we'll get to some of the customizations I've bolted on Org's publishing features. In it's standard configuration, the sitemap generator produces a plain, kind of boring looking list of posts, which was inadequate for me. After hacking on the sitemap generation function for a little while, I came up with the following solution: When I write a blog post, I enclose the "preview" part of the post in #+BEGIN_PREVIEW...#+END_PREVIEW tags, which my (very simple) parser then inserts into the sitemap page.

(defun my-blog-get-preview (file)
  "The comments in FILE have to be on their own lines, prefereably before and after paragraphs."
  (with-temp-buffer
    (insert-file-contents file)
    (goto-char (point-min))
    (let ((beg (+ 1 (re-search-forward "^#\\+BEGIN_PREVIEW$")))
          (end (progn (re-search-forward "^#\\+END_PREVIEW$")
                      (match-beginning 0))))
      (buffer-substring beg end))))

(defun my-blog-sitemap (project &optional sitemap-filename)
  "Generate the sitemap for my blog."
  (let* ((project-plist (cdr project))
         (dir (file-name-as-directory
               (plist-get project-plist :base-directory)))
         (localdir (file-name-directory dir))
         (exclude-regexp (plist-get project-plist :exclude))
         (files (nreverse
                 (org-publish-get-base-files project exclude-regexp)))
         (sitemap-filename (concat dir (or sitemap-filename "sitemap.org")))
         (sitemap-sans-extension
          (plist-get project-plist :sitemap-sans-extension))
         (visiting (find-buffer-visiting sitemap-filename))
         file sitemap-buffer)
    (with-current-buffer
        (let ((org-inhibit-startup t))
          (setq sitemap-buffer
                (or visiting (find-file sitemap-filename))))
      (erase-buffer)
      ;; loop through all of the files in the project
      (while (setq file (pop files))
        (let ((fn (file-name-nondirectory file))
              (link ;; changed this to fix links. see postprocessor.
               (file-relative-name file (file-name-as-directory
                                         (expand-file-name (concat (file-name-as-directory dir) "..")))))
              (oldlocal localdir))
          (when sitemap-sans-extension
            (setq link (file-name-sans-extension link)))
          ;; sitemap shouldn't list itself
          (unless (equal (file-truename sitemap-filename)
                         (file-truename file))
            (let (;; get the title and date of the current file
                  (title (org-publish-format-file-entry "%t" file project-plist))
                  (date (org-publish-format-file-entry "%d" file project-plist))
                  ;; get the preview section from the current file
                  (preview (my-blog-get-preview file))
                  (regexp "\\(.*\\)\\[\\([^][]+\\)\\]\\(.*\\)"))
              ;; insert a horizontal line before every post, kill the first one
              ;; before saving
              (insert "-----\n")
              (cond ((string-match-p regexp title)
                     (string-match regexp title)
                     ;; insert every post as headline
                     (insert (concat"* " (match-string 1 title)
                                    "[[file:" link "]["
                                    (match-string 2 title)
                                    "]]" (match-string 3 title) "\n")))
                    (t (insert (concat "* [[file:" link "][" title "]]\n"))))
              ;; add properties for `ox-rss.el' here
              (let ((rss-permalink (concat (file-name-sans-extension link) ".html"))
                    (rss-pubdate (format-time-string
                                  (car org-time-stamp-formats)
                                  (org-publish-find-date file))))
                (org-set-property "RSS_PERMALINK" rss-permalink)
                (org-set-property "PUBDATE" rss-pubdate))
              ;; insert the date, preview, & read more link
              (insert (concat date "\n\n"))
              (insert preview)
              (insert (concat "[[file:" link "][Read More...]]\n"))))))
      ;; kill the first hrule to make this look OK
      (goto-char (point-min))
      (let ((kill-whole-line t)) (kill-line))
      (save-buffer))
    (or visiting (kill-buffer sitemap-buffer))))
Next I define some pre-and postprocessors that run during the publishing process. They are used to move around some files before and after publishing.

(setq my-blog-emacs-config-name "emacsconfig.org")
(setq my-blog-process-emacs-config nil)

(defun my-blog-pages-preprocessor ()
  "Move a fresh version of the settings.org file to the pages directory."
  (when my-blog-process-emacs-config
    (let* ((cfg-file (expand-file-name (concat (file-name-as-directory user-emacs-directory)
                                               "settings.org")))
           (destdir (file-name-as-directory (plist-get project-plist :base-directory)))
           (cfg-file-dest (expand-file-name (concat destdir my-blog-emacs-config-name))))
      (copy-file cfg-file cfg-file-dest t))))

(defun my-blog-pages-postprocessor ()
  (message "In the pages postprocessor."))

(defun my-blog-articles-preprocessor ()
  (message "In the articles preprocessor."))

(defun my-blog-articles-postprocessor ()
  "Massage the sitemap file and move it up one directory.

for this to work, we have already fixed the creation of the
relative link in the sitemap-publish function"
  (let* ((sitemap-fn (concat (file-name-sans-extension (plist-get project-plist :sitemap-filename)) ".html"))
         (sitemap-olddir (plist-get project-plist :publishing-directory))
         (sitemap-newdir (expand-file-name (concat (file-name-as-directory sitemap-olddir) "..")))
         (sitemap-oldfile (expand-file-name sitemap-fn sitemap-olddir))
         (sitemap-newfile (expand-file-name (concat (file-name-as-directory sitemap-newdir) sitemap-fn))))
    (with-temp-buffer
      (goto-char (point-min))
      (insert-file-contents sitemap-oldfile)
      ;; massage the sitemap if wanted

      ;; delete the old file and write the correct one
      (delete-file sitemap-oldfile)
      (write-file sitemap-newfile))))
The next preprocessor runs CSSTidy on the site's CSS.

(defun my-blog-minify-css ()
  (let* ((csstidy "csstidy")
         (csstidy-args " --template=highest --silent=true")
         (css-dir (expand-file-name (plist-get project-plist :publishing-directory)))
         (css-files (directory-files css-dir t "^.*\\.css$")))
    (dolist (file css-files)
      (with-temp-buffer
        (insert (shell-command-to-string (concat csstidy " " file csstidy-args)))
        (write-file file)))))
Most of the publishing settings are defined in org-publish-project-alist.

(setq org-publish-project-alist
      `(("blog"
         :components ("blog-articles", "blog-pages", "blog-rss", "blog-res", "blog-images", "blog-dl"))
        ("blog-articles"
         :base-directory "~/repos/blog/blog/"
         :base-extension "org"
         :publishing-directory "~/repos/blog/www/blog/"
         :publishing-function org-html-publish-to-html
         :preparation-function my-blog-articles-preprocessor
         :completion-function my-blog-articles-postprocessor
         :htmlized-source t ;; this enables htmlize, which means that I can use css for code!

         :with-author t
         :with-creator nil
         :with-date t

         :headline-level 4
         :section-numbers nil
         :with-toc nil
         :with-drawers t
         :with-sub-superscript nil ;; important!!

         ;; the following removes extra headers from HTML output -- important!
         :html-link-home "/"
         :html-head nil ;; cleans up anything that would have been in there.
         :html-head-extra ,my-blog-extra-head
         :html-head-include-default-style nil
         :html-head-include-scripts nil
         :html-viewport nil

         :html-format-drawer-function my-blog-org-export-format-drawer
         :html-home/up-format ""
         :html-mathjax-options ,my-blog-local-mathjax
         :html-mathjax-template "<script type=\"text/javascript\" src=\"%PATH\"></script>"
         :html-footnotes-section "<div id='footnotes'><!--%s-->%s</div>"
         :html-link-up ""
         :html-link-home ""
         :html-preamble my-blog-header
         :html-postamble ,my-blog-footer

         ;; sitemap - list of blog articles
         :auto-sitemap t
         :sitemap-filename "blog.org"
         :sitemap-title "Blog"
         ;; custom sitemap generator function
         :sitemap-function my-blog-sitemap
         :sitemap-sort-files anti-chronologically
         :sitemap-date-format "Published: %a %b %d %Y")
        ("blog-pages"
         :base-directory "~/repos/blog/pages/"
         :base-extension "org"
         :publishing-directory "~/repos/blog/www/"
         :publishing-function org-html-publish-to-html
         :preparation-function my-blog-pages-preprocessor
         :completion-function my-blog-pages-postprocessor
         :htmlized-source t

         :with-author t
         :with-creator nil
         :with-date t

         :headline-level 4
         :section-numbers nil
         :with-toc nil
         :with-drawers t
         :with-sub-superscript nil ;; important!!
         :html-viewport nil ;; hasn't worked yet

         ;; the following removes extra headers from HTML output -- important!
         :html-link-home "/"
         :html-head nil ;; cleans up anything that would have been in there.
         :html-head-extra ,my-blog-extra-head
         :html-head-include-default-style nil
         :html-head-include-scripts nil

         :html-format-drawer-function my-blog-org-export-format-drawer
         :html-home/up-format ""
         :html-mathjax-options ,my-blog-local-mathjax
         :html-mathjax-template "<script type=\"text/javascript\" src=\"%PATH\"></script>"
         :html-footnotes-section "<div id='footnotes'><!--%s-->%s</div>"
         :html-link-up ""
         :html-link-home ""

         :html-preamble my-blog-header
         :html-postamble ,my-blog-footer)
        ("blog-rss"
         :base-directory "~/repos/blog/blog/"
         :base-extension "org"
         :publishing-directory "~/repos/blog/www/"
         :publishing-function org-rss-publish-to-rss

         :html-link-home "https://ogbe.net/"
         :html-link-use-abs-url t

         :title "Dennis Ogbe"
         :rss-image-url "https://ogbe.loc/img/feed-icon-28x28.png"
         :section-numbers nil
         :exclude ".*"
         :include ("blog.org")
         :table-of-contents nil)
        ("blog-res"
         :base-directory "~/repos/blog/res/"
         :base-extension ".*"
         :publishing-directory "~/repos/blog/www/res/"
         :publishing-function org-publish-attachment
         :completion-function my-blog-minify-css)
        ("blog-images"
         :base-directory "~/repos/blog/img/"
         :base-extension ".*"
         :publishing-directory "~/repos/blog/www/img/"
         :publishing-function org-publish-attachment
         :recursive t)
        ("blog-dl"
         :base-directory "~/repos/blog/dl/"
         :base-extension ".*"
         :publishing-directory "~/repos/blog/www/dl/"
         :publishing-function org-publish-attachment
         :Recursive t)))
Finally, define a small template for new blog posts.

(add-to-list 'org-structure-template-alist
             '("b" "#+TITLE: ?
#+AUTHOR: Dennis Ogbe
#+EMAIL: do@ogbe.net
#+DATE:
#+STARTUP: showall
#+STARTUP: inlineimages
#+BEGIN_PREVIEW\n\n#+END_PREVIEW\n"))
If you'd like, you can let me know what you think. I appreciate any sorts of feedback.
