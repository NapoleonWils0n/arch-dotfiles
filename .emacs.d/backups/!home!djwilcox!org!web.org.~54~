#+STARTUP: content

* Web

** [[https://expoundite.net/guides/dotfile-management][Dotfile Management and Documentation with Org-Mode]] :website:
 [2016-08-29 Mon 21:58] Dotfile Management and Documentation with Org-Mode
 Table of Contents

 1. Here's how
 1.1. Requirements
 1.2. "Normal" dotfiles
 1.3. Dotfiles in a dotdir
 1.4. Emacs dotfiles
 1.5. Credentials and secrets
 2. Documenting changes
 3. Managing remote dotfiles and configs
 4. Caveats
 5. Acknowledgements
 One day 'polm23' asked on Hacker News, what do the readers use to manage dotfiles. I was just experimenting with my method and contributed my two cents. Turns out, rare for me, I stumbled upon an original way to edit, document and deploy dotfiles. Although we Emacs users have been using Org-Mode to wrap our .emacs and document our settings for years, few people that I know have used it for managing more dotfiles.

 There are at least 3 advantages of using Org-Mode to manage dotfiles, that I can think of right now.

 Every line of configuration can be documented. You can record why and when you add this line. You can also document other possible options for this particular setting right above or below the code block, so you don't always need to look up man pages or other documentation.
 You need fewer error-prone symlinks. We have all been bitten by broken links when we were young and type 'ln -s dotfiles/vimrc ~/.vimrc', right? Even if we have learnt the lesson, and always use the full path, what if you want to migrate the dotfiles from BSD to Linux, where ~ mean different paths? I know, you set branches in your deployment script. Not a requirement with Org-Mode.
 You can manage remote dotfiles. Org-Mode can 'tangle' code blocks to a remote location, thus you can manage your server's nginx.conf as easily as your .bashrc.
 1 Here's how

 1.1 Requirements

 Emacs 24.x up, Org-Mode 8.x or newer, and Your favourite keyboard.

 Open a new file in Emacs, call it dotfiles.org or whatever you like.

 1.2 "Normal" dotfiles

 These files directly reside under your home directory. So managing them in Emacs is very straightforward. For ease of organization, you can put files of the same category, e.g. all things related to email, under a heading:

** Email
*** Muttrc
*** Aliases
*** goobookrc
 Then, under each subheading, put your files in an src block, like this:

** Email
*** Muttrc
  #+BEGIN_SRC conf :tangle ~/.muttrc
  #source "/etc/Muttrc"   # Not available on OS X
  source "gpg --batch --passphrase-file ~/.sec/.passphrase --textmode -d ~/.sec/mutt.gpg |"
  set realname="Haoyang Xu"

  set sig_dashes

  ...

  #+END_SRC
 Then if you run M-x org-babel-tangle, or press C-c C-v t, the content of the above src block will be written to $HOME/.muttrc, overwriting the file's content if it exists already.

 Similarly, write each file's content in an src block under the corresponding subheading:

** Email
*** Muttrc ...
*** Aliases
   #+BEGIN_SRC conf :tangle ~/.aliases
   alias mumon      foobar@example.com
   #+END_SRC
*** goobookrc
   #+BEGIN_SRC conf :tangle ~/.goobookrc
   [DEFAULT]
      # The following are optional, defaults are shown

    # This file is written by the oauth library, and should be kept secure,
    # it's like a password to your google contacts.
    ;oauth_db_filename: ~/.goobook_auth.json

    # The client secret file is not really secret.
    ;client_secret_filename: ~/.goobook_client_secret.json

    ;cache_filename: ~/.goobook_cache
    ;cache_expiry_hours: 24
    ;filter_groupless_contacts: yes
   #+END_SRC
 Now when you invoke org-babel-tangle, the 3 dotfiles will be written. You can put the .org file under version control, edit the dotfiles within Emacs, and deploy them with one command.

 1.3 Dotfiles in a dotdir

 For example, you want to manage your SSH config file, which is under .ssh. Normally it will not be more difficult than the case above. But if you are setting up a new machine and don't have .ssh path yet, Org-Mode will complain when you tangle.

 In that case, you can write a "magic" line at the beginning of the file:

 # -*- eval: (make-directory ".ssh" "~") -*-
 Alternatively, you can write an src block before the file content block to run commands that create the directories needed.

 #+BEGIN_SRC sh
 mkdir ~/.ssh
 #+END_SRC
 The best approach may be setting a header argument mkdirp to yes, like this:

 #+BEGIN_SRC sh :mkdirp yes :tangle ~/.ssh/config
 (your .ssh/config contents)
 #+END_SRC
 If your .ssh directory does not exist yet when you tangle this block, Org-Mode will create it for you.

 1.4 Emacs dotfiles

 If your are using the good old .emacs or init.el to store your Emacs configuration, they are managed in the same manner as the above cases. However, if your configuration are already living in another .org file, you probably don't want to put it in an "org" src block in your dotfile.org. My solution is to put it in a directory under the directory where my home.org (my dotfile) resides. That makes it a little untidy but I don't have a better solution right now. Ah, the taste of irony.

 1.5 Credentials and secrets

 If you are putting your dotfiles online, you need to save dotfiles with passwords/secrets in an encrypted format. Luckily, Emacs has very good encryption/decryption support. You can put things you don't want others to read into a specific .org file, and use epa-encrypt-file to get encrypted file with .gpg suffix. After that you can delete the clear text .org file. Next time when you edit the encrypted .org.gpg file, Emacs will use gpg-agent to ask for the password, and decrypt it for you.

 2 Documenting changes

 The above method provides a simple and fast way to put all your dotfiles in a few .org files. But it does not fully justify a migration of all your dotfiles into Org-mode src blocks. The strength of Org-mode based dotfile management lies in seamless documentation and instant deploy of changes.

 It is possible to breakdown a very long config file into multiple src blocks, and tangle them into one file for deployment. These src blocks can even be put into different subheadings, according to their categories and functions in the final tangled config.

 In this case, the file to write to is not specified in each src block's attributes ('head arguments', as in the official document), but as a property of the subheading under which the contents of the file goes. It is better to illustrate with an example:

** Git
   :PROPERTIES:
   :tangle:   ~/.gitconfig   # <- all src blocks under this 'Git' subtree will be written to ~/.gitconfig
   :END:
*** personal information
 #+BEGIN_SRC conf
     [user]
         name = John Doe
         email = john.doe@example.net
 #+END_SRC
*** push settings
 #+BEGIN_SRC conf
     [push]
         default = upstream
 #+END_SRC
 ...
 When you tangle this file, all src blocks under * Git subtree will be tangled into $HOME/.gitconfig.

 Now, suppose we want to change Git's push settings, it is easy to locate that subtree, and do some editing.

*** push settings
 #+BEGIN_SRC conf
     [push]
         default = simple
 #+END_SRC
 It may become difficult to tell which part gets edited after a while. Why not write a little note about the change?

*** push settings
 #+BEGIN_SRC conf
     [push]
         default = simple
 #+END_SRC
 [2016-03-19 Sat 22:31] change push default from 'upstream' to 'simple'.
 The timestamp can be inserted almost anywhere, by pressing C-u C-c !. If you only need to remember the date but not the time, you can use C-c !.

 If you often need to change such settings, it is a good idea to document all possible options:

*** push settings
    With ~push.default~ set to ~simple~, ~git push~ will fail if the current local branch is not tracking a remote branch, even if remote has a branch with the same name. This seems to be the safest option. Other possible values are:

  - ~upstream~: push the local branch to its upstream branch.
  - ~current~: push the local branch to a branch of the same name.

 #+BEGIN_SRC conf
     [push]
         default = simple
 #+END_SRC
 [2016-03-19 Sat 22:31] change push default from 'upstream' to 'simple'.
 In other cases, you may want to experiment with various combinations of options. You can write them all out, and tell Org-Mode not to tangle some of them:

 #+BEGIN_SRC conf :tangle no
 safe_threshold=1
 encryption_mechanism=ECDHE_RSA
 #+END_SRC

 #+BEGIN_SRC conf
 safe_threshold=0
 encryption_mechanism=HMAC-SHA1
 #+END_SRC
 Only the latter config will enter the config file.

 3 Managing remote dotfiles and configs

 In :tangle head argument or subtree property, you can specify a remote location, typically a remote server which you have SSH access. Suppose you are in charge of a web server, you can save yourself a lot of remote editing by using Org-Mode to manage its configuration:

** Nginx
   :PROPERTIES:
   :tangle:   /webadmin@ssh.example.org:configs/nginx.conf
 #+BEGIN_SRC conf
   worker_processes 4;

   events { worker_connections 1024; }
   ...
 #+END_SRC

 #+BEGIN_SRC sh :dir /ssh:webadmin@ssh.example.org|sudo:ssh.example.org :tangle no
 cp /home/webadmin/configs/nginx.conf /etc/nginx/
 chown nginx:nginx /etc/nginx/nginx.conf
 #+END_SRC
 The first code block get tangled into the remote file /home/webadmin/nginx.conf, the second code block has :tangle no and will not be tangled into any file, but you can run the code block from your local Emacs, it will ask you your sudo password, and copy the file to the right location and set owners.

 4 Caveats

 Emacs is single-threaded. If you use Org-Mode to deal with files/shells on remote systems through a slow connection, you will have to wait during tangling remote files and executing remote commands.
 You don't have to deal with symlinks, and you don't get its benefits. For example, you change your Git settings through command git config --global .... Such changes don't automatically get updated in your Org-Mode file. It is your responsibility to update your dotfile.org by hand.
 UPDATE: Ken Mankoff sends me a tip that partially solves the problem. You can add the following line to the top of your dotfile.org:

 #+PROPERTY: header-args:conf  :comments link :tangle-mode (identity #o444)
 In Ken's own words: "This makes the files read-only, so I can't edit them by mistake. It also creates a commented link at the top of each, so I can jump from the dotfile to its Org origin if I open the dotfile by mistake." Kudos.

 Your dotfile.org may become to big and unwieldy. For most people this is not a big deal. On my late-2012 MacBook Pro, opening Org files of a few hundred KB is as smooth as opening a new file. But if this system is used for a long time, the files may grow with all those logs and documents. In that case, you may want to split the files by, say, putting each top-level headline in a separate file. It is easy to create links to other files in Org-Mode, so you can still conveniently navigate through all the files.
 5 Acknowledgements

 This system is inspired by Sacha Chua's Emacs config. I did not realize Org-Mode was such a powerful tool for system administration until I see Howardism's talk on literate devops. Last but not least, thanks to all the people behind Org-Mode, Tramp and GNU Emacs.
* Emacs
** [[https://www.emacswiki.org/emacs/Magit][EmacsWiki: Magit]] :website:
   :PROPERTIES:
   :ID:       08b908db-4f8b-4d81-be0e-dc1df157ea2c
   :END:
[2016-08-12 Fri 20:51] Getting started with Magit is really easy:

M-x magit-status to see git status, and in the status buffer:
s to stage files
c c to commit (type the message then C-c C-c to actually commit)
b b to switch to another branch
Other handy keys:

P u to do a git push
F u to do a git pull
try to press TAB
** [[https://www.emacswiki.org/emacs/EmacsAsDaemon][EmacsWiki: Emacs As Daemon]] :website:
[2016-08-07 Sun 15:55] Emacs as Daemon on OS X using Launchd

If you’re running Emacs 23, you can run Emacs As Daemon via OS X’s launchd. The easiest solution is to use a tool like Lingon to create the plist file or can create one manually like this:

#+BEGIN_EXAMPLE
    <?xml version="1.0" encoding="UTF-8"?>
    <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" 
        "http://www.apple.com/DTDs/PropertyList-1.0.dtd"> 
     <plist version="1.0">
      <dict> 
        <key>Label</key>
        <string>gnu.emacs.daemon</string>
        <key>ProgramArguments</key>
        <array>
          <string>/Applications/Emacs.app/Contents/MacOS/Emacs</string>
          <string>--daemon</string>
        </array>
       <key>RunAtLoad</key>
       <true/>
       <key>ServiceDescription</key>
       <string>Gnu Emacs Daemon</string>
       <key>UserName</key>
       <string>[YOUR USERNAME HERE]</string>
      </dict>
    </plist>
#+END_EXAMPLE

This can then be installed in /Library/LaunchAgents and loaded via:

    sudo launchctl load -w /Library/LaunchAgents/gnu.emacs.daemon.plist
** [[https://stackoverflow.com/questions/24833964/package-listed-in-melpa-but-not-found-in-package-install][emacs - Package listed in MELPA, but not found]] :website:
   [2016-08-24 Wed 14:51] M-x package-list-packages

** [[https://emacsclub.github.io/html/org_tutorial.html][Org-mode Tutorial / Cheat Sheet]] :website:
[2016-08-19 Fri 00:53] Headings
It's all about headings in org. Headings such as this are created with * (stars). The number of stars defines the depth of the heading. Pressing <TAB> on headings will minimize/maximize them. Pressing tab multiple times in a row on headings with subheadings will maximize each subheading by depth corresponding to the number of times you pressed <TAB>.

Subheadings

Subheadings can nest within other headings such as this one. This is really convenient for organizing stuff.

"TODO"s (C-c C-t)
TODO's are created by starting headers with the keyword TODO or DONE. You can also create one with C-c C-t on a header. They are meant to represent tasks you wish to create within your organizational document. These can be helpful when planning out projects or assignments.

The TODO cycle

You can turn an existing header into a TODO item by cycling its TODO status. The shortcut for this is C-c C-t (t for todo).

Non-TODO -> TODO -> DONE -> Non-TODO … (with C-c C-t).

Lists
You can create bullets with the - (dash), numbered bullets or lists with #. (number[dot]). Tabbing multiple times changes the indentation of the bullet, but only if there is no text yet. Tabbing multiple levels can get confusing, but if you remember to <TAB> before typing - or #., things tend to work out.

Ordered Lists

item 1
item 2
sub 1
sub 2
subsub 1
Unordered Lists

Start with -, +, or *.

hello
item 2
item 3
subitem 1
sub
subsub
Description Lists

Start with -, +, or * and followed by ::

Matlab is a funny language. 
 - Scope :: Scope doesn't work as expected, and messes everything up
   when loops mix variables up in recursive functions.
 - Namespaces :: You wish. 
 - Header Files :: Nope.
gives

Matlab is a funny language.

Scope
Scope doesn't work as expected, and messes everything up when loops mix variables up in recursive functions.
Namespaces
You wish.
Header Files
Nope.
Text Formatting
Individual words can be bolded with stars, italicized with forward slashes, and underlined with underscores. Also, there is verbatim and strike-through.

*bold* /italics/ _underline_ ~verbatim~ +strike-through+
Tables
Tables can be created from any line that starts with '|' (pipe). A line that starts with '|-' (pipe dash) is considered a horizontal seperator; <TAB> after inserting it to expand the separator.

this    is      a       sample  table
move    from    one     col     to
the     other   with    <TAB>   this column
Some tips:

<TAB> realigns the columns, and moves to the next column. If at end of line, it will create a new row.
C-c C-c will realign the columns without moving or creating new ones.
<RET> moves to the next row.
Table Formatting

When exporting, tables are drawn without cell borders or frames. Here are useful table formatting commands which you place immediately before a table.

This is a table with lines around and between cells
this    is      a       sample  table
move    from    one     col     to
the     other   with    <TAB>   this column
Literal Examples
Literal examples are snippets of text or source code that need to be unformatted on org export. Put this text between #+begin-example and +end_example.

Source Code

Org-mode is great for inserting snippets of code. This can be done with the

#+BEGIN_SRC [major-mode-name] [options]
#+END_SRC
[major-mode-name] adds a lot of extra functionality to these code blocks within your org file. It's also good for whoever is reading to know what the language is.

For example:

1:  int main() { 
2:  return 0; 
3:  }
Useful options and commands.

Options:

-n : add line numbers to the source code.
+n : add line numbers but continue from last SRC snippet.
-r : remove labels from source code
Commands:

C-c ['] : Allows you to edit the source code at point in its native mode. Opens a new buffer where you exit after editing by the command again.
C-c l : calls org-store-link when editing with ~C-c '~. This creates a label at the line currently being edited. It can be retrieved later with C-c C-l.
Easy templates

It gets tiring to use the long tags if you're doing this a lot. These are shortcuts to generate the above snippet borders. To insert, type a '<' followed by a template selector and then <TAB>.

Template selectors:

s    #+begin_src ... #+end_src 
e    #+begin_example ... #+end_example
q    #+begin_quote ... #+end_quote 
v    #+begin_verse ... #+end_verse 
c    #+begin_center ... #+end_center 
l    #+begin_latex ... #+end_latex 
L    #+latex: 
h    #+begin_html ... #+end_html 
H    #+html: 
a    #+begin_ascii ... #+end_ascii 
A    #+ascii: 
i    #+index: line 
I    #+include: line 
Linking
Linking files together

You can link files together with

[[file:filename][name-of-link]]
This will preserve links after export to HTML as well.

Linking sections within a document

You can create a link to a section within your document with the section name in brackets. The second option lets you call the link something else.

[[section-title]]
[[section-title][link-title]]
Exporting (C-c C-e)
You can export org files to any of the supported formats with C-c C-e [option].

C-c C-e will show you the options available in a separate buffer. Common ones are text, html, and latex. You can get PDFs by converting to latex, but you need to have a LaTeX environment installed on your system to use this.

Export Options (C-c C-e t)

When org files are exported, certain variables are set automatically but can be manually set by you. To change a variable's value, use

#+VARIABLE-NAME: value
anywhere in your document. At the top is probably best.

To paste a template of all export options in your org document so that you can set them immediately, use (org-insert-export-options-template), or C-c C-e t.

This will print

#+TITLE:       the title to be shown (default is the buffer name)
#+AUTHOR:      the author (default taken from user-full-name)
#+DATE:        a date, an Org timestamp120, or a format string for format-time-string
#+EMAIL:       his/her email address (default from user-mail-address)
#+DESCRIPTION: the page description, e.g. for the XHTML meta tag
#+KEYWORDS:    the page keywords, e.g. for the XHTML meta tag
#+LANGUAGE:    language for HTML, e.g. ‘en’ (org-export-default-language)
#+TEXT:        Some descriptive text to be inserted at the beginning.
#+TEXT:        Several lines may be given.
#+OPTIONS:     H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t ...
#+BIND:        lisp-var lisp-val, e.g.: org-export-latex-low-levels itemize
               You need to confirm using these, or configure org-export-allow-BIND
#+LINK_UP:     the ``up'' link of an exported page
#+LINK_HOME:   the ``home'' link of an exported page
#+LATEX_HEADER: extra line(s) for the LaTeX header, like \usepackage{xyz}
#+EXPORT_SELECT_TAGS:   Tags that select a tree for export
#+EXPORT_EXCLUDE_TAGS:  Tags that exclude a tree from export
#+XSLT:        the XSLT stylesheet used by DocBook exporter to generate FO file
within your document, but with your actual variable values instead of descriptions. Change any of the variables to the value of your choice. These descriptions are provided here for your reference.

The #+OPTIONS variable is very useful for specific tweaks and will effect both HTML and LaTeX exports.

H:         set the number of headline levels for export
num:       turn on/off section-numbers
toc:       turn on/off table of contents, or set level limit (integer)
\n:        turn on/off line-break-preservation (DOES NOT WORK)
@:         turn on/off quoted HTML tags
::         turn on/off fixed-width sections
|:         turn on/off tables
^:         turn on/off TeX-like syntax for sub- and superscripts.  If
you write "^:{}", a_{b} will be interpreted, but
the simple a_b will be left as it is.
-:         turn on/off conversion of special strings.
f:         turn on/off footnotes like this[1].
todo:      turn on/off inclusion of TODO keywords into exported text
tasks:     turn on/off inclusion of tasks (TODO items), can be nil to remove
all tasks, todo to remove DONE tasks, or list of kwds to keep
pri:       turn on/off priority cookies
tags:      turn on/off inclusion of tags, may also be not-in-toc
<:         turn on/off inclusion of any time/date stamps like DEADLINES
*:         turn on/off emphasized text (bold, italic, underlined)
TeX:       turn on/off simple TeX macros in plain text
LaTeX:     configure export of LaTeX fragments.  Default auto
skip:      turn on/off skipping the text before the first heading
author:    turn on/off inclusion of author name/email into exported file
email:     turn on/off inclusion of author email into exported file
creator:   turn on/off inclusion of creator info into exported file
timestamp: turn on/off inclusion creation time into exported file
d:         turn on/off inclusion of drawers
Variables are set with nil or t, and sometimes take an argument. For example

#+OPTIONS:     H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t ...
Title

The title is taken from the first non-comment line in the file. If there is none, ie your file starts with a heading, it uses the filename. The title can be manually set using

#+TITLE: This is the title of the document
Table of Contents

Normally inserted after the first headline, you can set manually by inserting TABLE-OF-CONTENTS inside square-brackets ([]) seperately on a line.

Some useful options are:

#+OPTIONS: toc:2          (only to two levels in TOC)
#+OPTIONS: toc:nil        (no TOC at all)
Including Other Files

You can include files in an org document, which will be rendered on export. This is done using the single line command

#+INCLUDE: "file-path" [type] [src-language]
type can be either (quote, example, or src). if type is src, then src-language can be any major-mode language.

HTML Export

Stylesheet

You can include a stylesheet by using

#+STYLE:    <link rel="stylesheet" type="text/css" href="../stylesheet.css" />
The styles used by org-mode to export specific parts of your document can be set in your stylesheet with the following variables:

p.author            author information, including email
p.date              publishing date
p.creator           creator info, about org mode version
.title              document title
.todo               TODO keywords, all not-done states
.done               the DONE keywords, all states that count as done
.WAITING            each TODO keyword also uses a class named after itself
.timestamp          timestamp
.timestamp-kwd      keyword associated with a timestamp, like SCHEDULED
.timestamp-wrapper  span around keyword plus timestamp
.tag                tag in a headline
._HOME              each tag uses itself as a class, "@" replaced by "_"
.target             target for links
.linenr             the line number in a code example
.code-highlighted   for highlighting referenced code lines
div.outline-N       div for outline level N (headline plus text))
div.outline-text-N  extra div for text at outline level N
.section-number-N   section number in headlines, different for each level
div.figure          how to format an inlined image
pre.src             formatted source code
pre.example         normal example
p.verse             verse paragraph
div.footnotes       footnote section headline
p.footnote          footnote definition paragraph, containing a footnote
.footref            a footnote reference number (always a <sup>)
.footnum            footnote number in footnote definition (always <sup>)
Site Navigation

You can verily easily add "Up" and "Home" buttons on each page with

#+LINK_UP: 
#+LINK_HOME: index.html
Hyperlinks

Hyperlinks are managed by links and automatically converted to their html counterparts. See Linking Files.

Publishing
Publishing is simply automating your export pipeline. When you have many files that require export, it is a good idea to create a publishing script for this.

Publishing Script

To enable project publishing with org-mode, create a local file in the project directory with the instructions. In our example we have named it org_publish.el.

(defconst home (file-name-directory (or load-file-name buffer-file-name)))

(require 'org-publish)
(setq org-publish-project-alist
      `(
        ;; add all the components here
        ;; *notes* - publishes org files to html
        ("main-page"
         :base-directory ,(concat home "org/")
         :base-extension "org"  ; Filename suffix without dot
         :publishing-directory ,(concat home "html/")
         :recursive t           ; DONT include subdirectories
         :publishing-function org-publish-org-to-html
         :headline-levels 4             ; Just the default for this project.
         :style "<link rel=\"stylesheet\" type=\"text/css\" href=\"../css/stylesheet.css\" />"
         :auto-preamble t
         :auto-sitemap t                ; generate automagically
         :sitemap-sort-folders last
         :sitemap-title "Main Sitemap"
         )

        ;; The meeting notes to be published
        ("meeting-notes"
         :base-directory ,(concat home "org/meeting-notes/")
         :base-extension "org"
         :publishing-directory ,(concat home "html/meeting-notes/")
         :recursive nil
         :publishing-function org-publish-org-to-html
         :headline-levels 4
         :style "<link rel=\"stylesheet\" type=\"text/css\" href=\"../../css/stylesheet.css\" />"
         :auto-preamble t
         :auto-sitemap t
         :sitemap-title "Meeting Notes Directory"
         )

        ;; *static* - copies files to directories
        ("org-static"
         :base-directory ,(concat home "org/")
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory ,(concat home "html/")
         :recursive t
         :publishing-function org-publish-attachment
         )

        ;; *publish* with M-x org-publish-project RET emacsclub RET
        ("emacsclub" :components ("main-page" "meeting-notes" "org-static"))
        ))

** [[http://orgmode.org/manual/Initial-visibility.html][Initial visibility - The Org Manual]] :website:
[2016-08-19 Fri 00:24] 
2.3.2 Initial visibility

When Emacs first visits an Org file, the global state is set to OVERVIEW, i.e., only the top level headlines are visible1. This can be configured through the variable org-startup-folded, or on a per-file basis by adding one of the following lines anywhere in the buffer:

#+BEGIN_EXAMPLE
     #+STARTUP: overview
     #+STARTUP: content
     #+STARTUP: showall
     #+STARTUP: showeverything
#+END_EXAMPLE

The startup visibility options are ignored when the file is open for the first time during the agenda generation: if you want the agenda to honor the startup visibility, set org-agenda-inhibit-startup to nil.

Furthermore, any entries with a ‘VISIBILITY’ property (see Properties and columns) will get their visibility adapted accordingly. Allowed values for this property are folded, children, content, and all.

#+BEGIN_EXAMPLE
C-u C-u <TAB>     (org-set-startup-visibility)
#+END_EXAMPLE

** [[http://orgmode.org/manual/org_002dcrypt_002eel.html][org-crypt.el - The Org Manual]] :website:
 [2016-08-25 Thu 23:19] 15.11 org-crypt.el

 Org-crypt will encrypt the text of an entry, but not the headline, or properties. Org-crypt uses the Emacs EasyPG library to encrypt and decrypt files.

 Any text below a headline that has a ‘:crypt:’ tag will be automatically be encrypted when the file is saved. If you want to use a different tag just customize the org-crypt-tag-matcher setting.

 To use org-crypt it is suggested that you have the following in your .emacs:

#+BEGIN_EXAMPLE
      (require 'org-crypt)
      (org-crypt-use-before-save-magic)
      (setq org-tags-exclude-from-inheritance (quote ("crypt")))
     
      (setq org-crypt-key nil)
	;; GPG key to use for encryption
	;; Either the Key ID or set to nil to use symmetric encryption.
     
      (setq auto-save-default nil)
	;; Auto-saving does not cooperate with org-crypt.el: so you need
	;; to turn it off if you plan to use org-crypt.el quite often.
	;; Otherwise, you'll get an (annoying) message each time you
	;; start Org.
     
	;; To turn it off only locally, you can insert this:
	;;
	;; # -*- buffer-auto-save-file-name: nil; -*-
#+END_EXAMPLE

Excluding the crypt tag from inheritance prevents already encrypted text being encrypted again.
** [[http://orgmode.org/worg/org-hacks.html][Org ad hoc code, quick hacks and workarounds]] :website:
 [2016-08-24 Wed 22:42] Reload Org

 As of Org version 6.23b (released Sunday Feb 22, 2009) there is a new function to reload org files.

 Normally you want to use the compiled files since they are faster. If you update your org files you can easily reload them with

 #+BEGIN_EXAMPLE
 M-x org-reload
 #+END_EXAMPLE

 If you run into a bug and want to generate a useful backtrace you can reload the source files instead of the compiled files with

 #+BEGIN_EXAMPLE
 C-u M-x org-reload
 #+END_EXAMPLE

 and turn on the "Enter Debugger On Error" option. Redo the action that generates the error and cut and paste the resulting backtrace. To switch back to the compiled version just reload again with

 #+BEGIN_EXAMPLE
 M-x org-reload
 #+END_EXAMPLE

** [[https://ogbe.net/blog/blogging_with_org.html][Blogging using org-mode (and nothing else)]] :website:
[2016-08-13 Sat 22:44] Blogging using org-mode (and nothing else)

As you can tell, the look of this website has changed significantly—and it was about time for that. In case you didn't know, this site used to be hosted on http://web.ics.purdue.edu/, which provides free webspace for Purdue students. I used to generate the static HTML pages from plaintext markdown files using the Python-based static site generator Pelican. It worked well for a while, but I ended up having a few issues with that setup:

The host was painstakingly slow to reach from anywhere but the Purdue networks
Pelican would just break sometimes, providing me with nothing but some cryptic Python exception messages
The website did not use TLS and loaded a lot of external content over an unencrypted HTTP connection, causing it to render incompletely when using HTTPS Everywhere
I prefer Org-mode over the fragmented Markdown syntax for writing plaintext documents
Source code blocks are prettier in Org-mode
So, of course, I looked for an alternative.

Since I was predisposed towards using Org-mode for this, Org's publishing feature was the first alternative I investigated. I don't have high demands—all I need is a lightweight, stable, static site generator. I don't need tag clouds, sophisticated pagination, theme support (I'm fine with hacking together my own CSS), or any kind of plugin support; all I really need is a small org-to-HTML converter that can be hacked using Elisp and that I can bolt the extras that I want onto. After browsing around a little bit, I found some neat examples here, here and here. These sites are exactly what I wanted—minimalist, simple, and based on pure Org.

Obviously, the Org publishing feature was all that I needed. I whipped up a nice little configuration that produces this website from a set of Org source files, some custom CSS and HTML, and some custom Elisp. This is what happens at a high level:

All of the blog's files sit in the ~/repos/blog directory and are version controlled using git
The custom Elisp sits in my emacs config. You can find a copy of the relevant sections below.
The source files can be roughly divided into the following categories:
/blog/—Each blog post is contained in an individual Org-file
/pages/—Static Pages, like the landing page, sit in their own directory as Org files
/res/—Contains custom CSS and the MathJax JavaScript
Org's publishing function org-publish uses magic (and some Lisp) to spit out simple, easy to read, and easy to render HTML from these sources (and a few others)
After the HTML files are generated, I'm using rsync to push them onto a Tec-X1 instance from bladetec, which runs nginx on Ubuntu 14.04 and costs a phenomenal €0.99 a month
Here's the obligatory screenshot of me editing this post in Emacs:


There are a few tricks involved in doing this—mostly concerning the generation of the sitemap—, but I will let the relevant section of my config speak for themselves, since they're pretty well commented (I think):

UPDATE <2016-02-02 Tue>:

I've received a few questions asking whether there exists an RSS feed for this blog. There wasn't until today, but I think this will work. I'm using ox-rss.el to generate XML from the blog's sitemap. I had to trick it into doing a few things like generating the correct pubdates and permalinks, but I think it works fine for what I need. The code below is the updated version, with RSS.

The publishing uses the Org HTML export backend a lot, so to start off, we require it here, along with the RSS publishing backend.

#+BEGIN_EXAMPLE
(require 'ox-html)
(require 'ox-rss)
(setq org-export-html-coding-system 'utf-8-unix)
(setq org-html-viewport nil)
#+END_EXAMPLE

Next, we define some functions and variables that will be used by org-publish. First, let's define the website headers, footers, and make sure that the exported HTML points to the right style sheets.

#+BEGIN_EXAMPLE
(setq my-blog-extra-head
      (concat
       "<link rel='stylesheet' href='/../res/code.css' />\n"
       "<link rel='stylesheet' href='/../res/main.css' />"))

(setq my-blog-header-file "~/repos/blog/header.html")
(defun my-blog-header (arg)
  (with-temp-buffer
    (insert-file-contents my-blog-header-file)
    (buffer-string)))

(setq my-blog-footer
      "<hr />\n
<p><span style=\"float: left;\"><a href= \"/blog.xml\">RSS</a></span>
License: <a href= \"https://creativecommons.org/licenses/by-sa/4.0/\">CC BY-SA 4.0</a></p>\n
<p><a href= \"/contact.html\"> Contact</a></p>\n")
#+END_EXAMPLE

I'd also like to export drawers out to HTML; this idea is ripped directly from here.

#+BEGIN_EXAMPLE
(defun my-blog-org-export-format-drawer (name content)
  (concat "<div class=\"drawer " (downcase name) "\">\n"
    "<h6>" (capitalize name) "</h6>\n"
    content
    "\n</div>"))
#+END_EXAMPLE

MathJax usually recommends to use their CDN to load their JavaScript code, but I want to use a version that sits on my server.

#+BEGIN_EXAMPLE
(setq my-blog-local-mathjax
      '((path "/res/mj/MathJax.js?config=TeX-AMS-MML_HTMLorMML")
        (scale "100") (align "center") (indent "2em") (tagside "right")
        (mathml nil)))
#+END_EXAMPLE

Now we'll get to some of the customizations I've bolted on Org's publishing features. In it's standard configuration, the sitemap generator produces a plain, kind of boring looking list of posts, which was inadequate for me. After hacking on the sitemap generation function for a little while, I came up with the following solution: When I write a blog post, I enclose the "preview" part of the post in #+BEGIN_PREVIEW...#+END_PREVIEW tags, which my (very simple) parser then inserts into the sitemap page.

#+BEGIN_EXAMPLE
(defun my-blog-get-preview (file)
  "The comments in FILE have to be on their own lines, prefereably before and after paragraphs."
  (with-temp-buffer
    (insert-file-contents file)
    (goto-char (point-min))
    (let ((beg (+ 1 (re-search-forward "^#\\+BEGIN_PREVIEW$")))
          (end (progn (re-search-forward "^#\\+END_PREVIEW$")
                      (match-beginning 0))))
      (buffer-substring beg end))))

(defun my-blog-sitemap (project &optional sitemap-filename)
  "Generate the sitemap for my blog."
  (let* ((project-plist (cdr project))
         (dir (file-name-as-directory
               (plist-get project-plist :base-directory)))
         (localdir (file-name-directory dir))
         (exclude-regexp (plist-get project-plist :exclude))
         (files (nreverse
                 (org-publish-get-base-files project exclude-regexp)))
         (sitemap-filename (concat dir (or sitemap-filename "sitemap.org")))
         (sitemap-sans-extension
          (plist-get project-plist :sitemap-sans-extension))
         (visiting (find-buffer-visiting sitemap-filename))
         file sitemap-buffer)
    (with-current-buffer
        (let ((org-inhibit-startup t))
          (setq sitemap-buffer
                (or visiting (find-file sitemap-filename))))
      (erase-buffer)
      ;; loop through all of the files in the project
      (while (setq file (pop files))
        (let ((fn (file-name-nondirectory file))
              (link ;; changed this to fix links. see postprocessor.
               (file-relative-name file (file-name-as-directory
                                         (expand-file-name (concat (file-name-as-directory dir) "..")))))
              (oldlocal localdir))
          (when sitemap-sans-extension
            (setq link (file-name-sans-extension link)))
          ;; sitemap shouldn't list itself
          (unless (equal (file-truename sitemap-filename)
                         (file-truename file))
            (let (;; get the title and date of the current file
                  (title (org-publish-format-file-entry "%t" file project-plist))
                  (date (org-publish-format-file-entry "%d" file project-plist))
                  ;; get the preview section from the current file
                  (preview (my-blog-get-preview file))
                  (regexp "\\(.*\\)\\[\\([^][]+\\)\\]\\(.*\\)"))
              ;; insert a horizontal line before every post, kill the first one
              ;; before saving
              (insert "-----\n")
              (cond ((string-match-p regexp title)
                     (string-match regexp title)
                     ;; insert every post as headline
                     (insert (concat"* " (match-string 1 title)
                                    "[[file:" link "]["
                                    (match-string 2 title)
                                    "]]" (match-string 3 title) "\n")))
                    (t (insert (concat "* [[file:" link "][" title "]]\n"))))
              ;; add properties for `ox-rss.el' here
              (let ((rss-permalink (concat (file-name-sans-extension link) ".html"))
                    (rss-pubdate (format-time-string
                                  (car org-time-stamp-formats)
                                  (org-publish-find-date file))))
                (org-set-property "RSS_PERMALINK" rss-permalink)
                (org-set-property "PUBDATE" rss-pubdate))
              ;; insert the date, preview, & read more link
              (insert (concat date "\n\n"))
              (insert preview)
              (insert (concat "[[file:" link "][Read More...]]\n"))))))
      ;; kill the first hrule to make this look OK
      (goto-char (point-min))
      (let ((kill-whole-line t)) (kill-line))
      (save-buffer))
    (or visiting (kill-buffer sitemap-buffer))))
#+END_EXAMPLE

Next I define some pre-and postprocessors that run during the publishing process. They are used to move around some files before and after publishing.

#+BEGIN_EXAMPLE
(setq my-blog-emacs-config-name "emacsconfig.org")
(setq my-blog-process-emacs-config nil)

(defun my-blog-pages-preprocessor ()
  "Move a fresh version of the settings.org file to the pages directory."
  (when my-blog-process-emacs-config
    (let* ((cfg-file (expand-file-name (concat (file-name-as-directory user-emacs-directory)
                                               "settings.org")))
           (destdir (file-name-as-directory (plist-get project-plist :base-directory)))
           (cfg-file-dest (expand-file-name (concat destdir my-blog-emacs-config-name))))
      (copy-file cfg-file cfg-file-dest t))))

(defun my-blog-pages-postprocessor ()
  (message "In the pages postprocessor."))

(defun my-blog-articles-preprocessor ()
  (message "In the articles preprocessor."))

(defun my-blog-articles-postprocessor ()
  "Massage the sitemap file and move it up one directory.

for this to work, we have already fixed the creation of the
relative link in the sitemap-publish function"
  (let* ((sitemap-fn (concat (file-name-sans-extension (plist-get project-plist :sitemap-filename)) ".html"))
         (sitemap-olddir (plist-get project-plist :publishing-directory))
         (sitemap-newdir (expand-file-name (concat (file-name-as-directory sitemap-olddir) "..")))
         (sitemap-oldfile (expand-file-name sitemap-fn sitemap-olddir))
         (sitemap-newfile (expand-file-name (concat (file-name-as-directory sitemap-newdir) sitemap-fn))))
    (with-temp-buffer
      (goto-char (point-min))
      (insert-file-contents sitemap-oldfile)
      ;; massage the sitemap if wanted

      ;; delete the old file and write the correct one
      (delete-file sitemap-oldfile)
      (write-file sitemap-newfile))))
The next preprocessor runs CSSTidy on the site's CSS.

(defun my-blog-minify-css ()
  (let* ((csstidy "csstidy")
         (csstidy-args " --template=highest --silent=true")
         (css-dir (expand-file-name (plist-get project-plist :publishing-directory)))
         (css-files (directory-files css-dir t "^.*\\.css$")))
    (dolist (file css-files)
      (with-temp-buffer
        (insert (shell-command-to-string (concat csstidy " " file csstidy-args)))
        (write-file file)))))
Most of the publishing settings are defined in org-publish-project-alist.

(setq org-publish-project-alist
      `(("blog"
         :components ("blog-articles", "blog-pages", "blog-rss", "blog-res", "blog-images", "blog-dl"))
        ("blog-articles"
         :base-directory "~/repos/blog/blog/"
         :base-extension "org"
         :publishing-directory "~/repos/blog/www/blog/"
         :publishing-function org-html-publish-to-html
         :preparation-function my-blog-articles-preprocessor
         :completion-function my-blog-articles-postprocessor
         :htmlized-source t ;; this enables htmlize, which means that I can use css for code!

         :with-author t
         :with-creator nil
         :with-date t

         :headline-level 4
         :section-numbers nil
         :with-toc nil
         :with-drawers t
         :with-sub-superscript nil ;; important!!

         ;; the following removes extra headers from HTML output -- important!
         :html-link-home "/"
         :html-head nil ;; cleans up anything that would have been in there.
         :html-head-extra ,my-blog-extra-head
         :html-head-include-default-style nil
         :html-head-include-scripts nil
         :html-viewport nil

         :html-format-drawer-function my-blog-org-export-format-drawer
         :html-home/up-format ""
         :html-mathjax-options ,my-blog-local-mathjax
         :html-mathjax-template "<script type=\"text/javascript\" src=\"%PATH\"></script>"
         :html-footnotes-section "<div id='footnotes'><!--%s-->%s</div>"
         :html-link-up ""
         :html-link-home ""
         :html-preamble my-blog-header
         :html-postamble ,my-blog-footer
	 
         ;; sitemap - list of blog articles
         :auto-sitemap t
         :sitemap-filename "blog.org"
         :sitemap-title "Blog"
         ;; custom sitemap generator function
         :sitemap-function my-blog-sitemap
         :sitemap-sort-files anti-chronologically
         :sitemap-date-format "Published: %a %b %d %Y")
        ("blog-pages"
         :base-directory "~/repos/blog/pages/"
         :base-extension "org"
         :publishing-directory "~/repos/blog/www/"
         :publishing-function org-html-publish-to-html
         :preparation-function my-blog-pages-preprocessor
         :completion-function my-blog-pages-postprocessor
         :htmlized-source t

         :with-author t
         :with-creator nil
         :with-date t

         :headline-level 4
         :section-numbers nil
         :with-toc nil
         :with-drawers t
         :with-sub-superscript nil ;; important!!
         :html-viewport nil ;; hasn't worked yet

         ;; the following removes extra headers from HTML output -- important!
         :html-link-home "/"
         :html-head nil ;; cleans up anything that would have been in there.
         :html-head-extra ,my-blog-extra-head
         :html-head-include-default-style nil
         :html-head-include-scripts nil

         :html-format-drawer-function my-blog-org-export-format-drawer
         :html-home/up-format ""
         :html-mathjax-options ,my-blog-local-mathjax
         :html-mathjax-template "<script type=\"text/javascript\" src=\"%PATH\"></script>"
         :html-footnotes-section "<div id='footnotes'><!--%s-->%s</div>"
         :html-link-up ""
         :html-link-home ""

         :html-preamble my-blog-header
         :html-postamble ,my-blog-footer)
        ("blog-rss"
         :base-directory "~/repos/blog/blog/"
         :base-extension "org"
         :publishing-directory "~/repos/blog/www/"
         :publishing-function org-rss-publish-to-rss

         :html-link-home "https://ogbe.net/"
         :html-link-use-abs-url t

         :title "Dennis Ogbe"
         :rss-image-url "https://ogbe.loc/img/feed-icon-28x28.png"
         :section-numbers nil
         :exclude ".*"
         :include ("blog.org")
         :table-of-contents nil)
        ("blog-res"
         :base-directory "~/repos/blog/res/"
         :base-extension ".*"
         :publishing-directory "~/repos/blog/www/res/"
         :publishing-function org-publish-attachment
         :completion-function my-blog-minify-css)
        ("blog-images"
         :base-directory "~/repos/blog/img/"
         :base-extension ".*"
         :publishing-directory "~/repos/blog/www/img/"
         :publishing-function org-publish-attachment
         :recursive t)
        ("blog-dl"
         :base-directory "~/repos/blog/dl/"
         :base-extension ".*"
         :publishing-directory "~/repos/blog/www/dl/"
         :publishing-function org-publish-attachment
         :Recursive t)))
#+END_EXAMPLE

Finally, define a small template for new blog posts.

#+BEGIN_EXAMPLE
(add-to-list 'org-structure-template-alist
             '("b" "#+TITLE: ?
#+END_EXAMPLE

** [[https://github.com/yjwen/org-reveal/issues/148][Export error is back · Issue #148 · yjwen/org-reveal · GitHub]] :website:
 [2016-08-24 Wed 21:57] I found this workaround solution: http://emacs.stackexchange.com/a/16616/2780
 Actually only doing C-u M-x org-reload was enough in my case. But I need to run it every time I restarted emacs (fortunately that is not often).

** [[http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-dot.html][Dot Source Code Blocks in Org Mode]] :website:
 [2016-08-29 Mon 17:51] You can configure Org mode to execute dot source code blocks by adding a line to org-babel-load-languages:

 (org-babel-do-load-languages
  'org-babel-load-languages
  '((dot . t))) ; this line activates dot

** [[http://orgmode.org/manual/Handling-links.html][Handling links - The Org Manual]] :website:
 [2016-08-29 Mon 21:32] C-c C-x C-v     (org-toggle-inline-images)
 Toggle the inline display of linked images. Normally this will only inline images that have no description part in the link, i.e., images that will also be inlined during export. When called with a prefix argument, also display images that do have a link description. You can ask for inline images to be displayed at startup by configuring the variable org-startup-with-inline-images7.
* Linux
** [[http://steve-parker.org/articles/luks/][Articles - Linux Encrypted Filesystems with LUKS { steve-parker.org }]] :website:
[2016-08-15 Mon 00:08] 

#+BEGIN_EXAMPLE
#!/bin/sh

case $1 in
  start)
        cryptsetup luksOpen /dev/sda8 crypto
        echo "Mounting /crytpo..."
        mount /dev/mapper/crypto /crypto
        ;;
  stop)
        echo "Unmounting /crytpo..."
        umount /crypto
        cryptsetup luksClose crypto
        ;;
  *)
        echo "Usage: crypt [ start | stop ]"
        ;;
esac
#+END_EXAMPLE

** [[http://www.howtogeek.com/267376/how-to-automatically-correct-spelling-and-typos-when-using-cd-on-linux/][How to Automatically Correct Spelling and Typos When Using “cd” on Linux]] :website:
[2016-08-20 Sat 16:33] Scroll to the bottom of the .bashrc file and add the following line to the end of the file.

#+BEGIN_EXAMPLE
shopt -s cdspell
#+END_EXAMPLE

** [[http://man.cx/zathura(1)][Manpage for zathura - man.cx manual pages]] :website:
[2016-08-20 Sat 20:06] NAME

zathura − a PDF viewer

SYNOPSIS

zathura [-e xid] [-c path] [file] [password]

DESCRIPTION

zathura is a highly customizable and functional PDF viewer based on the poppler rendering library and the gtk+ toolkit. zathura provides a minimalistic and space saving interface, with a focus on keyboard interaction.

OPTIONS

-e xid

Reparents to window specified by xid. -c path Path to the config directory

DEFAULT SETTINGS

Shortcuts

J

Go to next page

K

Go to previous page

h

Scroll to the left

k

Scroll upwards

j

Scroll downwards

^f

Scroll page down

^b

Scroll page up

^d

Scroll half a page down

^u

Scroll half a page up

l

Scroll to the right

/

Search forwards

?

Search backwards

n

Search last keyword forwards

N

Search last keyword backwards

Tab

Toggle index

o

Open a file

a

Zoom to fit

s

Zoom to width

f

Follow a link on the page

m

Mark current position and save it in register specified by a character

’

Go to saved position specified by the ensuing character

r

Rotate the page

R

Reload the document

O

Change goto mode (L: search labels, D: default, O: manual offset)

^i

Invert the colors of the page

i

Change to insert mode

v

Change to visual mode

:

Focus inputbar

Backspace

Delete last character in the buffer

F5

Toggle fullscreen mode

^n

Toggle statusbar visibility

^m

Toggle inputbar visibility

Esc | ^c

Abort

^q

Quit the program

Index commands

k

Navigate to one element above the current position

j

Navigate to one element below the current position

h

Collapse current element

l

Expand current element

Space | Return

Select current element

Buffered commands

gg

Go to the first page

GG

Go to the last page

[0-9]+G

Go to the specified page

zI

Zoom in

zO

Zoom out

z0

Zoom to the original size

[0-9]+Z

Zoom to the given level

[0-9]+%

Move to the given position

Commands

blist

List and open bookmark

bmark

Bookmark current page

close

Close current file

coffset

Set page offset

delbmark

Delete given bookmark

export

Export images or attached files

info

Show information about the document

map

Map shortcut functions (map <key> <function> <argument> <mode>)

open

Open a file

print

Print the document

quit

Quit the program

rotate

Rotate the page

set

Set an option (set <id> <value>)

write

Save the document

Inputbar shortcuts

Up

Move up in the command history

Down

Move down in the command history

Tab | Shift + Tab

Tab completion

^w

Delete last word

CONFIGURATION

The complete configuration including the appearance and shortcuts of the program are defined in a separate file named config.h. In this file you are able to change and adjust all the settings of zathura according to your wishes.

In addition you can create a zathurarc file (default path: ~/.config/zathura/zathurarc) to overwrite settings and keybindings by using the set and map function. For more information please check the faq on the website: http://pwmt.org/projects/zathura
** [[https://librevault.com/][Librevault]] :website:
[2016-08-22 Mon 20:29] File synchronization designed with privacy in mind
